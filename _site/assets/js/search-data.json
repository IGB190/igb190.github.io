{"0": {
    "doc": "Ability Editor",
    "title": "Ability Editor",
    "content": "The ability editor allows you to create abilities and use custom logic to control the functionality of those abilities. ",
    "url": "/_pages/visual-coding/ability-editor.html",
    
    "relUrl": "/_pages/visual-coding/ability-editor.html"
  },"1": {
    "doc": "Ability Editor",
    "title": "Contents",
    "content": ". | Opening the Window | The Ability List | Creating a New Ability | Ability Properties . | Targeting Properties | Ability Visual Properties | Ability Functional Properties | . | Creating New Ability Templates | . ",
    "url": "/_pages/visual-coding/ability-editor.html",
    
    "relUrl": "/_pages/visual-coding/ability-editor.html"
  },"2": {
    "doc": "Ability Editor",
    "title": "Opening the Window",
    "content": "To open the window, go to IGB190 &gt; Open Custom Windows in the main Unity toolbar. This will open all of the main windows in a new window, with each being contained in a seperate tab. ",
    "url": "/_pages/visual-coding/ability-editor.html#opening-the-window",
    
    "relUrl": "/_pages/visual-coding/ability-editor.html#opening-the-window"
  },"3": {
    "doc": "Ability Editor",
    "title": "The Ability List",
    "content": "The ability list is shown on the far left of the window. This shows all of the abilities in the experience. | Deleting an Ability: To delete an ability, right-click on it and select Delete. | Renaming an Ability: To rename an ability, right-click on it and select Rename. | Copying an Ability: To copy an ability, right-click on it and select Copy. This is very useful when creating a new ability which closely matches an existing template. | . ",
    "url": "/_pages/visual-coding/ability-editor.html#the-ability-list",
    
    "relUrl": "/_pages/visual-coding/ability-editor.html#the-ability-list"
  },"4": {
    "doc": "Ability Editor",
    "title": "Creating a New Ability",
    "content": "You can create a new ability by either right-clicking on an existing ability and selecting Copy, or pressing the + button in the top-left corner of the window and selecting from a pre-existing template. ",
    "url": "/_pages/visual-coding/ability-editor.html#creating-a-new-ability",
    
    "relUrl": "/_pages/visual-coding/ability-editor.html#creating-a-new-ability"
  },"5": {
    "doc": "Ability Editor",
    "title": "Ability Properties",
    "content": "Select the ability you want to modify by left-clicking on it in the ability list. If there are a lot of abilities in your game, you may need to scroll to find the one you want. When the ability is selected, the rest of the ability window will show information specific to this ability. You can modify these properties to adjust the ability. Targeting Properties . The ability targets option determines the targeting requirements for the ability. If the player is the caster, the ‘target’ is defined by the mouse cursor. If it is a monster, this is determined by their internal logic. The following options exist: . | None: The ability has no targeting requirements. | Unit in Melee: Caster must have a target, and that target must be in melee range. | Unit at Range: Caster must have a target, and that target must be in the specified range. | Point in Melee: Caster will target the closest point that it is in melee range. | Point at Ranged: Caster will target the closest point that is in range. | . It can be awkward requiring the player to have a target to cast an ability. When designing player abilities, consider using point requirements instead. Ability Visual Properties . The below visual properties change how the ability sounds, looks, and is presented to the player. They do not change the functionality of the ability in any way. | Property | Description | . | Cast Animation | This controls the animation that will play when the ability is cast. This does not change the functionality of the ability, only its visuals. | . | Ability Description | The description for the ability. If this is an ability that the player can have, the description will be shown when hovering over the ability in the UI. | . | Ability Sound Effect | The sound effect that will play when the ability is cast. | . | Volume | The voume of the sound effect. | . | Animation Trigger Point | Controls when in the animation that the ability should ‘activate’. Adjust this so that the ability appears to cast at the correct point for the ability. | . Ability Functional Properties . The below functional properties control the basic logic for the ability, such as its range and cooldown. | Property | Description | . | Can Cast While Moving | If enabled, the unit can continue moving while the cast is in progress. | . | Has Specific Cast Time | By default, abilities have a standardised cast time. You can override this if you want an ability to have a long cast time, or cast very quickly. | . | Requires Line of Sight | If enabled, the unit must be able to ‘see’ the target to start the cast. | . | Update Target While Casting | If enabled, the target location can change while the ability is being cast. This can make some abilities feel much more responsive, but can also feel awkward on others. | . | Cooldown is Attack Speed | If enabled, the ability cooldown is set to the attack speed of the player. This causes changes to attack speed to also affect the cast rate of the ability. You should use this for the ‘main’ player abilities. | . | Ability Generates Resource | If enabled, the ability will generate resources instead of spending them. | . | Range | The casting range of the ability (in meters). If the ability needs a melee target or location, it will be set to the melee range of the caster. | . | Resource Cost | Determines the amount of resources the ability costs (or rewards). | . | Cast Time | The cast time of the ability. This will be determined automatically unless the ‘Has Specific Cast Time’ option is enabled. | . | Cooldown | The cooldown of the ability. This is set automatically if the ability uses attack speed for its cooldown. | . ",
    "url": "/_pages/visual-coding/ability-editor.html#ability-properties",
    
    "relUrl": "/_pages/visual-coding/ability-editor.html#ability-properties"
  },"6": {
    "doc": "Ability Editor",
    "title": "Creating New Ability Templates",
    "content": "You can create a new ability template by moving (or copying) an ability into the Resources/Templates folder (the abilities can be found in the Resources/Abilities folder). The template abilities do not show up in the Abilities List below, but can be used as a template when creating a new ability with the + button. ",
    "url": "/_pages/visual-coding/ability-editor.html#creating-new-ability-templates",
    
    "relUrl": "/_pages/visual-coding/ability-editor.html#creating-new-ability-templates"
  },"7": {
    "doc": "Ability Nodes",
    "title": "Ability Nodes",
    "content": "Below is a summary of all the visual scripting nodes which return an ability in the visual scripting system. ",
    "url": "/_pages/visual-coding/ability-nodes.html",
    
    "relUrl": "/_pages/visual-coding/ability-nodes.html"
  },"8": {
    "doc": "Ability Nodes",
    "title": "Contents",
    "content": ". | Specify a Specific Ability | Ability Nodes | . Specify a Specific Ability . If the visual scripting node allows it, you will be able to specify a specific ability for the node, rather than using one of the methods below. Ability Nodes . Ability . Random ability on unit . Returns a random ability on the specified unit. Ability . Last ability cast by unit . Returns the last ability cast by the specified unit. ",
    "url": "/_pages/visual-coding/ability-nodes.html",
    
    "relUrl": "/_pages/visual-coding/ability-nodes.html"
  },"9": {
    "doc": "Action Nodes",
    "title": "Action Nodes",
    "content": "Below is a summary of all the action nodes in the visual scripting system. These action nodes perform all of the action logic for the visual scripting system. ",
    "url": "/_pages/visual-coding/action-nodes.html",
    
    "relUrl": "/_pages/visual-coding/action-nodes.html"
  },"10": {
    "doc": "Action Nodes",
    "title": "Contents",
    "content": ". | Action Nodes (Flow) | Action Nodes (Unit) | Action Nodes (Player) | Action Nodes (Audio) | Action Nodes (Feedback) | Action Nodes (Projectile) | Action Nodes (Region) | Action Nodes (Quests) | Action Nodes (Pickups) | Action Nodes (Game State) | Action Nodes (UI Actions) | Action Nodes (Variables) | Action Nodes (Global Variables) | . Action Nodes (Flow) . Action &gt; Flow . Wait . Waits for the specified amount of time before continuing the remaining actions. Action &gt; Flow . If statement . Only executes the nested actions if the given condition is true. Action &gt; Flow . While statement . Executes the nested actions while the specified condition is true. Action &gt; Flow . For statement . Executes the nested actions a set number of times. Action &gt; Flow . For each unit in unit group . Executes the nested actions for each unit in the specified unit group. Action &gt; Flow . Disable this script . Disables this script, preventing the events from triggering. Action &gt; Flow . Send event message . Sends an event message which can be received by the corresponding event message event. This allows you to have one script trigger logic in a secondary script. Action Nodes (Unit) . … . Action Nodes (Player) . … . Action Nodes (Audio) . Action &gt; Audio . Play audio clip . Plays the specified sound effect. Do not use this to play game music - use the Play music action instead! . Action &gt; Audio . Play music . Plays the specified music. Do not use this to play sound effects - use the Play audio clip action instead! . Action Nodes (Feedback) . … . Action Nodes (Projectile) . … . Action Nodes (Region) . Action &gt; Region . Destroy region . Destroys all regions with the given name (if any exist). Action Nodes (Quests) . … . Action Nodes (Pickups) . Action &gt; Pickups . Spawn item pickup . Spawn an item pickup at the specified location which contains the specified item. Action &gt; Pickups . Spawn gold pickup . Spawn a gold pickup at the specified location which contains the specified amount of gold. Action &gt; Pickups . Spawn health pickup . Spawn a health pickup at the specified location. Action Nodes (Game State) . Action &gt; Game State . Win game . Have the player win the game, taking them to the victory screen. Action Nodes (UI Actions) . Action &gt; UI Actions . Show debug message . Logs the given message to the game console. Action &gt; UI Actions . Show in-world status message . Shows the specified message in world space with the specified text and color (this is how the gold and health messages are implemented!). Action &gt; UI Actions . Show tutorial message . Shows the given message in a tutorial window. This is useful for giving information or instructions to the player. Action Nodes (Variables) . … . Action Nodes (Global Variables) . … . ",
    "url": "/_pages/visual-coding/action-nodes.html",
    
    "relUrl": "/_pages/visual-coding/action-nodes.html"
  },"11": {
    "doc": "Camera Controller",
    "title": "Camera Controller",
    "content": "The Camera Controller class controls the game camera for the main experience. ",
    "url": "/_pages/documentation/camera-controller.html",
    
    "relUrl": "/_pages/documentation/camera-controller.html"
  },"12": {
    "doc": "Camera Controller",
    "title": "Repositioning the Camera",
    "content": "You can change the offset of the camera (including as its angle and distance from the player) by changing its location in the scene relative to the player. When the game starts, it will calculate the difference in location between the player and the camera and match this for the entire game. ",
    "url": "/_pages/documentation/camera-controller.html#repositioning-the-camera",
    
    "relUrl": "/_pages/documentation/camera-controller.html#repositioning-the-camera"
  },"13": {
    "doc": "Camera Controller",
    "title": "Highlighting Points of Interest",
    "content": "You can highlight points of interest in the game, which will allow you to pan to the given location. ",
    "url": "/_pages/documentation/camera-controller.html#highlighting-points-of-interest",
    
    "relUrl": "/_pages/documentation/camera-controller.html#highlighting-points-of-interest"
  },"14": {
    "doc": "Item Pickup",
    "title": "The ItemPickup Class",
    "content": "The ItemPickup class is used to control the generation of item pickups. ",
    "url": "/_pages/documentation/class-itempickup.html#the-itempickup-class",
    
    "relUrl": "/_pages/documentation/class-itempickup.html#the-itempickup-class"
  },"15": {
    "doc": "Item Pickup",
    "title": "Contents",
    "content": ". | Placing an Item Pickup in the World | Spawning an Item Pickup | Destroying an Item Pickup | . ",
    "url": "/_pages/documentation/class-itempickup.html",
    
    "relUrl": "/_pages/documentation/class-itempickup.html"
  },"16": {
    "doc": "Item Pickup",
    "title": "Placing an Item Pickup in the World",
    "content": "In the base project, you can find the Item Pickup prefab under Assets &gt; Assets to Use &gt; ItemPickup. Drag this prefab into the environment and place it where you want it. In the inspector, you can then choose to either specify a specific item for the pickup, or the intended rarity for the randomised item. ",
    "url": "/_pages/documentation/class-itempickup.html#placing-an-item-pickup-in-the-world",
    
    "relUrl": "/_pages/documentation/class-itempickup.html#placing-an-item-pickup-in-the-world"
  },"17": {
    "doc": "Item Pickup",
    "title": "Spawning an Item Pickup",
    "content": "// Items are scriptable objects. If you expose the item variable in the inspector, // you can select the item template you want to use. public Item itemToSpawn; // Spawn an item pickup containing the specified item. ItemPickup.Spawn(spawnLocation, itemToSpawn); // Spawn an item pickup containing a random item of the specified rarity. ItemPickup.Spawn(spawnLocation, Item.ItemRarity.Common); ItemPickup.Spawn(spawnLocation, Item.ItemRarity.Rare); ItemPickup.Spawn(spawnLocation, Item.ItemRarity.Legendary); . ",
    "url": "/_pages/documentation/class-itempickup.html#spawning-an-item-pickup",
    
    "relUrl": "/_pages/documentation/class-itempickup.html#spawning-an-item-pickup"
  },"18": {
    "doc": "Item Pickup",
    "title": "Destroying an Item Pickup",
    "content": "Item Pickups are standard prefabs of standard Unity GameObjects. To Destroy an ItemPickup object, just call Destroy() with the GameObject as a parameter. ",
    "url": "/_pages/documentation/class-itempickup.html#destroying-an-item-pickup",
    
    "relUrl": "/_pages/documentation/class-itempickup.html#destroying-an-item-pickup"
  },"19": {
    "doc": "Item Pickup",
    "title": "Item Pickup",
    "content": " ",
    "url": "/_pages/documentation/class-itempickup.html",
    
    "relUrl": "/_pages/documentation/class-itempickup.html"
  },"20": {
    "doc": "Monster",
    "title": "The Monster Class",
    "content": "The monster class controls the logic for all non-player units that are controlled by the AI system. The Monster class inherits from the Unit class, so all Unit methods and logic apply to the monsters as well. ",
    "url": "/_pages/documentation/class-monster.html#the-monster-class",
    
    "relUrl": "/_pages/documentation/class-monster.html#the-monster-class"
  },"21": {
    "doc": "Monster",
    "title": "Contents",
    "content": ". | The Monster Class . | Monster Logic . | Monster Sleeping | Target Selection | Monster Movement | . | Public Methods . | Modifying Unit Health | Modifying Unit Resources | Modifying Unit Abilities | Checking Unit Statuses | Moving a Unit | Visual Effects | Applying a Buff | Modifying a Stat | Modifying a Specific Unit Ability | Damaging a Unit | . | Download the Model | Import the Mixamo Model | Importing Mixamo Animations | Features | . | . ",
    "url": "/_pages/documentation/class-monster.html",
    
    "relUrl": "/_pages/documentation/class-monster.html"
  },"22": {
    "doc": "Monster",
    "title": "Monster Logic",
    "content": "Monster Sleeping . If there are no valid nearby targets within the detection range, the monster will ‘sleep’. It will not try to move or cast abilities. Monster sleeping helps to save processing power, and also ensures that monsters won’t immediately try to walk towards the player on the other side of a map (e.g., if they have been manually placed into the environment). Target Selection . Monsters will automatically use all of their abilities, if they are valid to cast (i.e., they will cast them as soon as they are in-range, the ability is off-cooldown, they have sufficient resources and all other conditions are met). Monsters will choose to target the closest valid unit with their abilities. Monster Movement . Monsters will move towards their target until all of their abilities are in range. For example, if a monster has a ranged attack and a melee attack, they will move forward until they are close enough to use their melee attack (stopping along the way to cast their ranged attack when it is off cooldown). Monsters with no abilities, or no abilities that target an enemy, will remain stationary and not try to move towards any target. ",
    "url": "/_pages/documentation/class-monster.html#monster-logic",
    
    "relUrl": "/_pages/documentation/class-monster.html#monster-logic"
  },"23": {
    "doc": "Monster",
    "title": "Public Methods",
    "content": "You can interact with a Monster via its public methods. These allow you to modify stats, visuals, and other key properties. Monsters have all of the public methods available to a unit, as well as the following: . Modifying Unit Health . // Add 100 to the unit's current health. unit.AddHealth(100); // Remove 100 from the unit's current health. unit.RemoveHealth(100); . Modifying Unit Resources . // Add 100 to the unit's current resource count. unit.AddResource(100); // Remove 100 from the unit's current resource count. unit.RemoveResource(100); . Modifying Unit Abilities . // Add the specified ability to the unit. unit.AddAbility(abilityTemplate); // Remove the specified ability from the unit. unit.RemoveAbility(abilityTemplate); // Replace the current specified ability with the specified ability. If the unit does // not have the 'current' ability, they will not get the new ability. unit.ReplaceAbility(currentAbilityTemplate, newAbilityTemplate); // Lock the given ability, preventing the unit from casting it. If the unit does not // have an ability with a matching template, this will do nothing. unit.LockAbility(abilityTemplate); // Unlock the given ability, allowing the unit to cast it. If the unit does not // have an ability with a matching template, this will do nothing. unit.UnlockAbility(abilityTemplate); . Checking Unit Statuses . // Check to see if the unit is currently stunned. bool isStunned = unit.IsStunned(); // Check to see if the unit is currently moving. bool isMoving = unit.IsMoving(); // Check to see if the unit is currently casting an ability. bool isCasting = unit.IsCasting(); // Check to see if the specified unit is an enemy of the unit. bool isEnemy = unit.IsEnemy(unitToCompare); // Check to see if the specified unit is an ally of the unit. bool isAlly = unit.IsAlly(unitToCompare); // Check to see if the unit has a specific buff/debuff. bool hasBuff = unit.HasBuff(\"NameOfBuff\"); // Check to see if the unit is currently able to move. bool canMove = unit.CanMove(); . Moving a Unit . // Instantly move the unit to the specified location. unit.Teleport(newPosition); // Smoothly move the unit to the specified location in the specified amount of time. unit.MoveOverTime(newPosition, timeToReachDestination); . Visual Effects . // Set the outline colour for the unit. unit.SetOutline(Color.red); // Set the outline colour and size for the unit. unit.SetOutline(Color.red, outlineSize, outlineAlpha); // Have the unit play the specified animation (the name must match a node in the Animator). unit.PlayAnimation(\"AnimationName\"); // Rotate the unit by the given amount (in degrees) over the given duration. unit.StartSpin(degreesToRotate, duration); . Applying a Buff . // Set the outline colour for the unit. unit.SetOutline(Color.red); // Set the outline colour and size for the unit. unit.SetOutline(Color.red, outlineSize, outlineAlpha); // Have the unit play the specified animation (the name must match a node in the Animator). unit.PlayAnimation(\"AnimationName\"); // Rotate the unit by the given amount (in degrees) over the given duration. unit.StartSpin(degreesToRotate, duration); . Modifying a Stat . // Permanently modifies the movement speed of the unit. In this case, // it will increase the movement speed of the unit by 20%. // // Valid Stats include: // - Damage // - MaxHealth // - MaxResource // - CriticalStrikeChance // - CriticalStrikeDamage // - Armor // - AttacksPerSecond // - CooldownReduction // - MovementSpeed // - ResourceCostReduction // - ResourceGeneration unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f); // Temporarily modifies the movement speed of the unit. In this case, // it will increase the movement speed of the unit by 20% for 10 seconds. unit.stats[Stat.MovementSpeed].AddTimedPercentageModifier(1.2f, 10.0f); // A buff name can also be given when applying a buff or debuff. This lets you // reference it later if you want to remove or modify it (e.g., an ability may // give the player a movement speed boost until they next take damage). unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f, \"Sprint\"); // If a buff name is given, a maximum number of buff 'stacks' can also be specified. // This limits how many times this effect can be applied to the unit. In this case, // the unit can have three sprint modifiers applied (resulting in a 60% speed increase). unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f, \"Sprint\", 3); // This method can be used to remove all existing modifiers with a matching label. unit.stats[Stat.Damage].RemoveModifiersWithLabel(\"Sprint\"); // A stat modifier can also be a specific value, rather than a percentage. In this case, // the base damage of all attacks is increased by 5 instead of a percentage modifier. unit.stats[Stat.Damage].AddValueModifier(5); . Modifying a Specific Unit Ability . // Modifies the damage of the specified ability on the specified unit. // In this example, the ability would do 50% more damage. unit.AddAbilityDamageModifier(ability, 1.5f); // Modifies the cooldown of the specified ability on the specified unit. // In this example, the ability cooldown will be reduced by 50%. unit.AddAbilityCooldownModifier(ability, 0.5f); // Modifies the cost of the specified ability on the specified unit. // In this example, the ability would be reduced to 10% of its current cost. unit.AddAbilityCostModifier(ability, 0.1f); // Just like with stat modifiers, the ability modifiers can also be timed. // In this example, the ability would deal double damage for five seconds. unit.AddTimedAbilityDamageModifier(ability, 2.0f, 5.0f); // Just like with stat modifiers, the ability modifiers can also be given a // reference name, and a maximum stack count. unit.AddTimedAbilityDamageModifier(ability, 2.0f, 5.0f, \"Frenzy\", 1); // Use this method to remove all ability modifiers from an ability which have // the given reference name (e.g., this would remove the frenzy buff in the previous example). unit.RemoveAbilityBuffModifiers(ability, \"Frenzy\"); . Damaging a Unit . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . ",
    "url": "/_pages/documentation/class-monster.html#public-methods",
    
    "relUrl": "/_pages/documentation/class-monster.html#public-methods"
  },"24": {
    "doc": "Monster",
    "title": "Download the Model",
    "content": ". | Go to Mixamo. | Log in, or create a new account if you do not already have one. | Select or upload your character model. | Customize the animation if needed by selecting from the animations available. | Click the Download button. | Choose the following options for Unity: . | Format: FBX for Unity. | Pose: T-Pose. | Animation: If you want to include the animation, make sure it’s selected. | Skin: With Skin. | . | Click the Download button in the popup. | . ",
    "url": "/_pages/documentation/class-monster.html#download-the-model",
    
    "relUrl": "/_pages/documentation/class-monster.html#download-the-model"
  },"25": {
    "doc": "Monster",
    "title": "Import the Mixamo Model",
    "content": ". | Open your Unity project. | In the Project window, navigate to the folder you want to import the model into. | Drag the downloaded FBX file into the Unity folder, or right-click and select Import New Asset to locate and import the file manually. | Once imported, select the model in the Project window. | In the Inspector, go to the Model tab and ensure the Animation Type is set to Humanoid (for human-like characters) or Generic (for other types of models). | Under the Material section, if you’re using the legacy shader, check Import Materials and Use Legacy Materials to ensure proper texture mapping. This will help the model use the correct materials that were imported with the FBX. | Click Apply. | . ",
    "url": "/_pages/documentation/class-monster.html#import-the-mixamo-model",
    
    "relUrl": "/_pages/documentation/class-monster.html#import-the-mixamo-model"
  },"26": {
    "doc": "Monster",
    "title": "Importing Mixamo Animations",
    "content": ". | Go to Mixamo.com. | Log in, or create a new account if you do not already have one. | . Mixamo models use different avatars for defining animations. This means that an animation shown on one character may not look correct if it is applied to a different character. If you encounter this problem, you should use a T-Pose for the avatar instead. dfgdfgdfg . ",
    "url": "/_pages/documentation/class-monster.html#importing-mixamo-animations",
    
    "relUrl": "/_pages/documentation/class-monster.html#importing-mixamo-animations"
  },"27": {
    "doc": "Monster",
    "title": "Features",
    "content": ". | Clean layout | Responsive design | Easy to use | . Default label . Blue label . Stable . New release . Coming soon . Deprecated . ",
    "url": "/_pages/documentation/class-monster.html#features",
    
    "relUrl": "/_pages/documentation/class-monster.html#features"
  },"28": {
    "doc": "Monster",
    "title": "Monster",
    "content": " ",
    "url": "/_pages/documentation/class-monster.html",
    
    "relUrl": "/_pages/documentation/class-monster.html"
  },"29": {
    "doc": "Player",
    "title": "The Player Class",
    "content": "The player class handles all logic unique to the player character. The player class inherits from the Unit class, so all Unit methods can also be called on the player. You are not required to write any code in this unit. It is recommended that you instead use the provided visual scripting system in this unit. If you want to implement logic that cannot easily be handled by that system though, this documentation should help you better understand the code and classes in the project. ",
    "url": "/_pages/documentation/class-player.html#the-player-class",
    
    "relUrl": "/_pages/documentation/class-player.html#the-player-class"
  },"30": {
    "doc": "Player",
    "title": "Contents",
    "content": ". | Referencing the Player | Public Methods . | Modifying Player Experience | Modifying Player Level | Modifying Player Gold | State Changes | Status Checks | . | . ",
    "url": "/_pages/documentation/class-player.html",
    
    "relUrl": "/_pages/documentation/class-player.html"
  },"31": {
    "doc": "Player",
    "title": "Referencing the Player",
    "content": "The script architecture is setup for a single player character being in the game at once. You can get a reference to this player using GameManager.player. For example, if you attached the below script as a component to an object in the scene, the player would gain 500 gold whenever the spacebar key was pressed. public class PlayerGoldChangeExample : MonoBehaviour { void Update() { if (Input.GetKeyDown(KeyCode.Space)) { GameManager.player.AddGold(500); } } } . ",
    "url": "/_pages/documentation/class-player.html#referencing-the-player",
    
    "relUrl": "/_pages/documentation/class-player.html#referencing-the-player"
  },"32": {
    "doc": "Player",
    "title": "Public Methods",
    "content": "You can interact with the player via the below public methods. These allow you to modify unit stats, visuals, and other key properties. Modifying Player Experience . // Adds 100 experience to the player. This may cause the player to gain a level. player.AddExperience(100); // Removes 100 experience from the player. This **cannot** cause the player to lose a level. // At most, it can reset them to the start of their current level. player.RemoveExperience(100); // Sets the current experience of the player to an exact value. A value of 0 sets them to the // start of the level. This **can** cause the player to gain multiple levels. player.SetExperience(0); . Modifying Player Level . // Adds 5 levels to the player. This will *keep* their current experience at that new level. // If the player was 200 experience into level 3, they would be 200 experience into level 8 after this runs. player.AddLevels(5); // Removes levels from the player. This will *keep** the player's current experience at that new level. // If the player was 200 experience into level 8, they would be 200 experience into level 3 after this runs. player.RemoveLevels(5); // Sets the player to a specific level. player.SetLevel(5); . Be very careful when removing levels from the player. You may have logic that runs when the player reaches a specific level, and this could cause that logic to run multiple times if you are not careful. Modifying Player Gold . // Adds 100 to the player's current gold amount. player.AddGold(100); // Removes 100 gold from the player's current gold amount. Gold cannot go below 0. player.RemoveGold(100); // Sets the player's current gold to exactly 500. Gold cannot go below 0. player.SetGold(500); . State Changes . // Revives a dead player. player.Revive(); . Status Checks . // Checks to see whether the player has a specific item equipped. bool itemEquipped = player.HasItemEquipped(item); // Check to see whether the player has a specific item in their inventory. bool itemInInventory = player.HasItemInInventory(item); . ",
    "url": "/_pages/documentation/class-player.html#public-methods",
    
    "relUrl": "/_pages/documentation/class-player.html#public-methods"
  },"33": {
    "doc": "Player",
    "title": "Player",
    "content": " ",
    "url": "/_pages/documentation/class-player.html",
    
    "relUrl": "/_pages/documentation/class-player.html"
  },"34": {
    "doc": "Unit",
    "title": "The Unit Class",
    "content": "While you are not required to write any code in the development of your experience, if you need to implement complex logic for an item, ability, quest, or other game mechanic, this section will show you how it can be done. This page will focus specifically on how you can build an item with custom logic. The experience can be developed without any code, but if you do want to use code to develop your items, abilities, quests or other content to control complex logic which cannot easi . ",
    "url": "/_pages/documentation/class-unit.html#the-unit-class",
    
    "relUrl": "/_pages/documentation/class-unit.html#the-unit-class"
  },"35": {
    "doc": "Unit",
    "title": "Contents",
    "content": ". | The Unit Class . | Unit Logic . | Ability Selection | Target Selection | Unit Range | . | Public Methods . | Modifying Unit Health | Modifying Unit Resources | Modifying Unit Abilities | Checking Unit Statuses | Moving a Unit | Visual Effects | Applying a Buff | Modifying a Stat | Modifying a Specific Unit Ability | Damaging a Unit | . | Download the Model | Import the Mixamo Model | Importing Mixamo Animations | Features | . | . ",
    "url": "/_pages/documentation/class-unit.html",
    
    "relUrl": "/_pages/documentation/class-unit.html"
  },"36": {
    "doc": "Unit",
    "title": "Unit Logic",
    "content": "Ability Selection . Non-player units will constantly try to . Target Selection . Unit Range . Unit . ",
    "url": "/_pages/documentation/class-unit.html#unit-logic",
    
    "relUrl": "/_pages/documentation/class-unit.html#unit-logic"
  },"37": {
    "doc": "Unit",
    "title": "Public Methods",
    "content": "You can interact with units via the public methods. These allow you to modify unit stats, visuals, and other key properties. Modifying Unit Health . // Add 100 to the unit's current health. unit.AddHealth(100); // Remove 100 from the unit's current health. unit.RemoveHealth(100); . Modifying Unit Resources . // Add 100 to the unit's current resource count. unit.AddResource(100); // Remove 100 from the unit's current resource count. unit.RemoveResource(100); . Modifying Unit Abilities . // Add the specified ability to the unit. unit.AddAbility(abilityTemplate); // Remove the specified ability from the unit. unit.RemoveAbility(abilityTemplate); // Replace the current specified ability with the specified ability. If the unit does // not have the 'current' ability, they will not get the new ability. unit.ReplaceAbility(currentAbilityTemplate, newAbilityTemplate); // Lock the given ability, preventing the unit from casting it. If the unit does not // have an ability with a matching template, this will do nothing. unit.LockAbility(abilityTemplate); // Unlock the given ability, allowing the unit to cast it. If the unit does not // have an ability with a matching template, this will do nothing. unit.UnlockAbility(abilityTemplate); . Checking Unit Statuses . // Check to see if the unit is currently stunned. bool isStunned = unit.IsStunned(); // Check to see if the unit is currently moving. bool isMoving = unit.IsMoving(); // Check to see if the unit is currently casting an ability. bool isCasting = unit.IsCasting(); // Check to see if the specified unit is an enemy of the unit. bool isEnemy = unit.IsEnemy(unitToCompare); // Check to see if the specified unit is an ally of the unit. bool isAlly = unit.IsAlly(unitToCompare); // Check to see if the unit has a specific buff/debuff. bool hasBuff = unit.HasBuff(\"NameOfBuff\"); // Check to see if the unit is currently able to move. bool canMove = unit.CanMove(); . Moving a Unit . // Instantly move the unit to the specified location. unit.Teleport(newPosition); // Smoothly move the unit to the specified location in the specified amount of time. unit.MoveOverTime(newPosition, timeToReachDestination); . Visual Effects . // Set the outline colour for the unit. unit.SetOutline(Color.red); // Set the outline colour and size for the unit. unit.SetOutline(Color.red, outlineSize, outlineAlpha); // Have the unit play the specified animation (the name must match a node in the Animator). unit.PlayAnimation(\"AnimationName\"); // Rotate the unit by the given amount (in degrees) over the given duration. unit.StartSpin(degreesToRotate, duration); . Applying a Buff . // Set the outline colour for the unit. unit.SetOutline(Color.red); // Set the outline colour and size for the unit. unit.SetOutline(Color.red, outlineSize, outlineAlpha); // Have the unit play the specified animation (the name must match a node in the Animator). unit.PlayAnimation(\"AnimationName\"); // Rotate the unit by the given amount (in degrees) over the given duration. unit.StartSpin(degreesToRotate, duration); . Modifying a Stat . // Permanently modifies the movement speed of the unit. In this case, // it will increase the movement speed of the unit by 20%. // // Valid Stats include: // - Damage // - MaxHealth // - MaxResource // - CriticalStrikeChance // - CriticalStrikeDamage // - Armor // - AttacksPerSecond // - CooldownReduction // - MovementSpeed // - ResourceCostReduction // - ResourceGeneration unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f); // Temporarily modifies the movement speed of the unit. In this case, // it will increase the movement speed of the unit by 20% for 10 seconds. unit.stats[Stat.MovementSpeed].AddTimedPercentageModifier(1.2f, 10.0f); // A buff name can also be given when applying a buff or debuff. This lets you // reference it later if you want to remove or modify it (e.g., an ability may // give the player a movement speed boost until they next take damage). unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f, \"Sprint\"); // If a buff name is given, a maximum number of buff 'stacks' can also be specified. // This limits how many times this effect can be applied to the unit. In this case, // the unit can have three sprint modifiers applied (resulting in a 60% speed increase). unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f, \"Sprint\", 3); // This method can be used to remove all existing modifiers with a matching label. unit.stats[Stat.Damage].RemoveModifiersWithLabel(\"Sprint\"); // A stat modifier can also be a specific value, rather than a percentage. In this case, // the base damage of all attacks is increased by 5 instead of a percentage modifier. unit.stats[Stat.Damage].AddValueModifier(5); . Modifying a Specific Unit Ability . // Modifies the damage of the specified ability on the specified unit. // In this example, the ability would do 50% more damage. unit.AddAbilityDamageModifier(ability, 1.5f); // Modifies the cooldown of the specified ability on the specified unit. // In this example, the ability cooldown will be reduced by 50%. unit.AddAbilityCooldownModifier(ability, 0.5f); // Modifies the cost of the specified ability on the specified unit. // In this example, the ability would be reduced to 10% of its current cost. unit.AddAbilityCostModifier(ability, 0.1f); // Just like with stat modifiers, the ability modifiers can also be timed. // In this example, the ability would deal double damage for five seconds. unit.AddTimedAbilityDamageModifier(ability, 2.0f, 5.0f); // Just like with stat modifiers, the ability modifiers can also be given a // reference name, and a maximum stack count. unit.AddTimedAbilityDamageModifier(ability, 2.0f, 5.0f, \"Frenzy\", 1); // Use this method to remove all ability modifiers from an ability which have // the given reference name (e.g., this would remove the frenzy buff in the previous example). unit.RemoveAbilityBuffModifiers(ability, \"Frenzy\"); . Damaging a Unit . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . ",
    "url": "/_pages/documentation/class-unit.html#public-methods",
    
    "relUrl": "/_pages/documentation/class-unit.html#public-methods"
  },"38": {
    "doc": "Unit",
    "title": "Download the Model",
    "content": ". | Go to Mixamo. | Log in, or create a new account if you do not already have one. | Select or upload your character model. | Customize the animation if needed by selecting from the animations available. | Click the Download button. | Choose the following options for Unity: . | Format: FBX for Unity. | Pose: T-Pose. | Animation: If you want to include the animation, make sure it’s selected. | Skin: With Skin. | . | Click the Download button in the popup. | . ",
    "url": "/_pages/documentation/class-unit.html#download-the-model",
    
    "relUrl": "/_pages/documentation/class-unit.html#download-the-model"
  },"39": {
    "doc": "Unit",
    "title": "Import the Mixamo Model",
    "content": ". | Open your Unity project. | In the Project window, navigate to the folder you want to import the model into. | Drag the downloaded FBX file into the Unity folder, or right-click and select Import New Asset to locate and import the file manually. | Once imported, select the model in the Project window. | In the Inspector, go to the Model tab and ensure the Animation Type is set to Humanoid (for human-like characters) or Generic (for other types of models). | Under the Material section, if you’re using the legacy shader, check Import Materials and Use Legacy Materials to ensure proper texture mapping. This will help the model use the correct materials that were imported with the FBX. | Click Apply. | . ",
    "url": "/_pages/documentation/class-unit.html#import-the-mixamo-model",
    
    "relUrl": "/_pages/documentation/class-unit.html#import-the-mixamo-model"
  },"40": {
    "doc": "Unit",
    "title": "Importing Mixamo Animations",
    "content": ". | Go to Mixamo.com. | Log in, or create a new account if you do not already have one. | . Mixamo models use different avatars for defining animations. This means that an animation shown on one character may not look correct if it is applied to a different character. If you encounter this problem, you should use a T-Pose for the avatar instead. dfgdfgdfg . ",
    "url": "/_pages/documentation/class-unit.html#importing-mixamo-animations",
    
    "relUrl": "/_pages/documentation/class-unit.html#importing-mixamo-animations"
  },"41": {
    "doc": "Unit",
    "title": "Features",
    "content": ". | Clean layout | Responsive design | Easy to use | . Default label . Blue label . Stable . New release . Coming soon . Deprecated . ",
    "url": "/_pages/documentation/class-unit.html#features",
    
    "relUrl": "/_pages/documentation/class-unit.html#features"
  },"42": {
    "doc": "Unit",
    "title": "Unit",
    "content": " ",
    "url": "/_pages/documentation/class-unit.html",
    
    "relUrl": "/_pages/documentation/class-unit.html"
  },"43": {
    "doc": "Color Nodes",
    "title": "Color Nodes",
    "content": "Below is a summary of all the visual scripting nodes which return a color in the visual scripting system. ",
    "url": "/_pages/visual-coding/color-nodes.html",
    
    "relUrl": "/_pages/visual-coding/color-nodes.html"
  },"44": {
    "doc": "Color Nodes",
    "title": "Contents",
    "content": ". | Specify a Specific Color | Function Nodes | . Specify a Specific Color . If the visual scripting node allows it, you will be able to specify a specific color for the node, rather than using one of the methods below. Function Nodes . There are currently no function nodes which return a color, but some may be added in the future (e.g., returning a random color). ",
    "url": "/_pages/visual-coding/color-nodes.html",
    
    "relUrl": "/_pages/visual-coding/color-nodes.html"
  },"45": {
    "doc": "Condition Nodes",
    "title": "Condition Nodes",
    "content": "Below is a summary of all the condition/boolean nodes in the visual scripting system. You can use any of these (or a combination of these) when looking to perform condition checks in the visual scripting system. ",
    "url": "/_pages/visual-coding/condition-nodes.html",
    
    "relUrl": "/_pages/visual-coding/condition-nodes.html"
  },"46": {
    "doc": "Condition Nodes",
    "title": "Contents",
    "content": ". | Region Conditions | Input Conditions | Unit Group Conditions | Comparisons | Unit | Quests | Player | Variables | . Region Conditions . Condition &gt; Region . Region exists . True if a region with the exact name currently exists. Condition &gt; Region . Unit is in region . True if the specified unit is currently in a region with the specified name. The name must match the region exactly. Input Conditions . Condition &gt; Input . Key is held . True if the specified key is currently being held. For simple keys, just enter the key (e.g., enter ‘f’ if you want to check for the f key being pressed). If you want to check more “complex” keybinds, refer to the lists in the discussion thread here. Unit Group Conditions . Condition &gt; Unit Group . Unit group is empty . True if the specified Unit Group contains no units. Condition &gt; Unit Group . Unit group is not empty . True if the specified Unit Group contains at least one units. Condition &gt; Unit Group . Unit is in unit group . True if the specified Unit is contained in the specified Unit Group. Condition &gt; Unit Group . Unit is not in unit group . True if the specified Unit is not contained in the specified Unit Group. Comparisons . Condition &gt; Comparisons . Or Comparison . True if either (or both) of the specified conditions is true. Condition &gt; Comparisons . And Comparison . True if both of the specified conditions are true. Condition &gt; Comparisons . Bool Comparison . Compares two Boolean conditions and checks them against the assigned operator (Equal to, or Not Equal To). Condition &gt; Comparisons . Bool Comparison . Compares two Boolean conditions and checks them against the assigned operator (Equal to, or Not Equal To). Condition &gt; Comparisons . Number Comparison . Compares two numbers and checks them against the assigned operator (Equal to, or Not Equal To, Greater Than, Less Than, Greater Than or Equal To, Less Than or Equal To). Condition &gt; Comparisons . Vector Comparison . Compares two vectors/positions and checks them against the assigned operator (Equal to, or Not Equal To). Condition &gt; Comparisons . Ability Comparison . Compares two abilities and checks them against the assigned operator (Equal to, or Not Equal To). Condition &gt; Comparisons . Text Comparison . Compares two pieces of text and checks them against the assigned operator (Equal to, or Not Equal To). Condition &gt; Comparisons . Unit Comparison . Compares two units and checks them against the assigned operator (Equal to, or Not Equal To). Unit . Condition &gt; Unit . Unit matches template . Returns true if the specified unit matches the specified template. This is useful for checking the “type” of unit - e.g., a Skeleton Archer. Condition &gt; Unit . Unit is moving . Returns true if the specified unit is currently moving (this does not include unit movement through the Unit &gt; Move Over Time action, only standard movement). Condition &gt; Unit . Unit is stationary . Returns true if the specified unit is not currently moving (this does not check for movement through the Unit &gt; Move Over Time action, only ‘standard’ movement). Condition &gt; Unit . Unit is casting . Returns true if the specified unit is currently casting an ability. Condition &gt; Unit . Unit can move . Returns true if the specified unit could currently move. Condition &gt; Unit . Unit has buff . Returns true if the specified unit has a buff with the specified name. This buff name must match a buff exactly (this is case sensitive). Condition &gt; Unit . Unit is stunned . Returns true if the specified unit is currently stunned. Condition &gt; Unit . Unit ability is on cooldown . Returns true if the specified ability for the specified unit is currently on cooldown. Condition &gt; Unit . Unit can cast ability . Returns true if the specified ability for the specified unit could currently be cast. This may be because the unit lacks resources, is already casting, etc. Condition &gt; Unit . Unit is empowered . Returns true if the specified unit is currently empowered. Only monsters can be empowered. Condition &gt; Unit . Unit has tag . Returns true if the specified unit has the specified tag. This must match the unit tag exactly. Quests . Condition &gt; Quest . Quest is active . Returns true if a quest with the specified name is currently active for the player. Condition &gt; Quest . Quest has been completed . Returns true if a quest with the specified name has been completed by the player. Player . Condition &gt; Player . Player has item equipped . Returns true if the player currently has the specified item equipped. Condition &gt; Player . Player has item in inventory . Returns true if the player currently has the specified item in their inventory. This can be useful for checking if the player is holding a key or other object. Variables . Condition &gt; Variables . Boolean Variable . Returns the value of a Boolean variable with the given name. This variable is local to the “group” of scripts - i.e., the variable will be shared by all of the scripts used by the ability or item. Condition &gt; Variables . Global Boolean Variable . Returns the value of a Boolean variable with the given name. This variable is global to the entire application. ",
    "url": "/_pages/visual-coding/condition-nodes.html",
    
    "relUrl": "/_pages/visual-coding/condition-nodes.html"
  },"47": {
    "doc": "Contribute",
    "title": "Contributing to the Website",
    "content": "You are encouraged to contribute to the website documentation by editing existing pages, or creating new pages (e.g., guides). Instructions for how to do this are given below. ",
    "url": "/_pages/contribute.html#contributing-to-the-website",
    
    "relUrl": "/_pages/contribute.html#contributing-to-the-website"
  },"48": {
    "doc": "Contribute",
    "title": "Website Architecture",
    "content": "The website is written with Jekyll using the Just-the-Docs template and freely hosted with Github Pages. Jekyll allows you to create a website with simple markdown, with navigation and styling being handled automatically by your chosen template. The public Github repository for the website can be found here. The pages are automatically generated from the content of the repository. ",
    "url": "/_pages/contribute.html#website-architecture",
    
    "relUrl": "/_pages/contribute.html#website-architecture"
  },"49": {
    "doc": "Contribute",
    "title": "Making Changes via Pull Requests",
    "content": "Updates to the site are handled via Pull Requests (PRs). PRs are an industry standard way of updating repositories in a safe and standardised way. To create a pull reuest, do the following: . | Fork the repository by going to the repository page and pressing the ‘Fork’ button in the top-right. | Give the forked repository a name, and then press the Create Fork button. | Clone the forked repository to your machine. | Create a new branch for the changes you are making. | Make any changes you would like to add to the site. | Commit the changes and push them to the forked repository. | Go to the forked repository on Github (the one you just pushed to). Select the ‘Pull requests’ tab, then click the ‘New pull request’ button. | On the left, select the main repository and the main branch. On the right, select the forked repository and the branch that has all of the changes you made. | Add a title and brief description describing the changes. | Click the “Create pull request” button to submit it for review. | Wait for the pull request to be accepted (or for a response to be given). | . ",
    "url": "/_pages/contribute.html#making-changes-via-pull-requests",
    
    "relUrl": "/_pages/contribute.html#making-changes-via-pull-requests"
  },"50": {
    "doc": "Contribute",
    "title": "Adding or Updating Pages",
    "content": "The content for the website can be found in the _pages directory. All markdown files in this folder are automatically converted into website pages with correct navigation. For example, you can see the markdown that was used to generate this page here. The template page for the Just-the-Docs template has examples for all valid markdown you can use (e.g., callout boxes, code snippets, table of contents). Images should be uploaded to the _pages\\assets folder. ",
    "url": "/_pages/contribute.html#adding-or-updating-pages",
    
    "relUrl": "/_pages/contribute.html#adding-or-updating-pages"
  },"51": {
    "doc": "Contribute",
    "title": "Contribute",
    "content": " ",
    "url": "/_pages/contribute.html",
    
    "relUrl": "/_pages/contribute.html"
  },"52": {
    "doc": "Code Documentation",
    "title": "Code Documentation",
    "content": "You can develop your experience using only the visual coding system. If you do want to write code to develop very niche or specific systems though, the project does allow for this. This section details some of the main system architecture and how you can interface your own code into it. Review each of the pages below. ",
    "url": "/_pages/documentation/documentation.html",
    
    "relUrl": "/_pages/documentation/documentation.html"
  },"53": {
    "doc": "Visual Effects",
    "title": "Visual Effects",
    "content": "When designing your game, it is likely that you will need to use a variety of visual effects for the player abilities, monster abilities, items, and general game logic. The project comes with a variety of visual effects included, but it is likely that you will also want to add some of your own. You can find all of the example visual effects in the Assets to Use &gt; Effects folder in the project. ",
    "url": "/_pages/systems/effects.html",
    
    "relUrl": "/_pages/systems/effects.html"
  },"54": {
    "doc": "Visual Effects",
    "title": "Contents",
    "content": ". | Creating a Visual Effect | Spawning Visual Effects | . ",
    "url": "/_pages/systems/effects.html",
    
    "relUrl": "/_pages/systems/effects.html"
  },"55": {
    "doc": "Visual Effects",
    "title": "Creating a Visual Effect",
    "content": "To create a visual effect, create a new GameObject or select an existing one. Add a Custom Visual Effect component to it. When you are choosing visual effects in the visual coding system, only GameObjects which have this component will be populated into the list. Next, if you want the effect to be stored in a particular category (e.g., you may have a category for explosions, a category for glows, etc) enter the name of the category in the Sub Group slot. Finally, if you don’t want the effect to appear in the list (e.g., it may be a template prefab which other prefabs use), you can enable the Is Template property in the Custom Visual Effect script. ",
    "url": "/_pages/systems/effects.html#creating-a-visual-effect",
    
    "relUrl": "/_pages/systems/effects.html#creating-a-visual-effect"
  },"56": {
    "doc": "Visual Effects",
    "title": "Spawning Visual Effects",
    "content": "To spawn a visual effect, use either the Feedback &gt; Play Visual Effect on Unit or the Feedback &gt; Play Visual Effect at Point action. If you choose to play the effect on a unit, the effect will follow the unit around. This is useful if you want the effect to move with the unit. For example, if the unit has a buff, you want the buff visual to be attached to the unit. If you spawn an effect on a unit, you can also choose to Play or Refresh the effect rather than playing it as normal. This ensures that you don’t spawn multiple copies of the effect if they aren’t required. Do I need to use the Custom Visual Effect component? . You do not need to use the custom visual effect component. It doesn’t add any functionality, and instead just makes it easier for the visual scripting tool to find visual effects in the project. If you are writing C# code, you can just Instantiate effects as you normally would. ",
    "url": "/_pages/systems/effects.html#spawning-visual-effects",
    
    "relUrl": "/_pages/systems/effects.html#spawning-visual-effects"
  },"57": {
    "doc": "Event Nodes",
    "title": "Event Nodes",
    "content": "Below is a summary of all the events in the visual scripting system, with a short summary of each and an outline of any associated preset values which will be populated from the event. ",
    "url": "/_pages/visual-coding/event-nodes.html",
    
    "relUrl": "/_pages/visual-coding/event-nodes.html"
  },"58": {
    "doc": "Event Nodes",
    "title": "Contents",
    "content": ". | Ability Events | Time Events | Unit Events | Player Events | Region Events | Projectile Events | Quest Events | Input Events | . Ability Events . When a unit begins casting this ability This event will only trigger if it is attached to an ability, and will only trigger for the unit that cast the ability. It will trigger when the ability starts casting. If you want to handle the ability cast logic, it is recommended you use the When a unit finishes casting this ability event instead. The event populates the following preset values: . | Casting Unit (Unit): The unit that cast the ability. | Ability Target Location (Location): The location that the ability should be cast at. | Target Unit (Unit): The target unit for the ability (only exists if the ability targets a specific unit). | . When a unit finishes casting this ability This event will only trigger if it is attached to an ability, and will only trigger for the unit that cast the ability. It will trigger when the ability finishes casting, and is the main event you should use to execute logic when coding the logic for an ability cast. The event populates the following preset values: . | Casting Unit (Unit): The unit that cast the ability. | Ability Target Location (Location): The location that the ability should be cast at. | Target Unit (Unit): The target unit for the ability (only exists if the ability targets a specific unit). | . Time Events . On script loaded This event will trigger when the script is loaded. The script is loaded when the logic should start being ‘checked’. If the script is attached to an ability, this will either be triggered when the unit spawns, or the ability is added to the unit. If the script is attached to an item, it is triggered when the item is equipped. If the script is attached to a general script, it will be triggered when the game begins. This event is often used to handle setup logic. The event populates no preset values. On script unloaded This event will trigger when the script is unloaded. The script is unloaded when the logic should stop being ‘checked’. If the script is attached to an ability, this will either be triggered when the unit dies, or the ability is removed from the unit. If the script is attached to an item, it is triggered when the item is unequipped. The event populates no preset values. Do every frame This event will trigger every game frame. This can be very powerful if you need to constantly check if something has happened, but should be avoided if you are executing complex game logic (e.g., don’t spawn visual effects every frame). The event populates no preset values. Do after X seconds This event will trigger a specific amount of time after the script is first loaded, and then won’t trigger again. You can specify the exact amount of time in the number node on the event. The event populates no preset values. Do every X seconds This event will repeatedly trigger, with a delay between each execution. Specify the exact amount of time to delay between executions in the number node on the event. The event populates no preset values. Unit Events . Unit is killed This event is triggered every time a unit is killed, regardless of faction or how it was killed (e.g., it could be an ally, a monster, or the player itself). The event populates the following preset values: . | Killed Unit (Unit): The unit that was killed. | Killing Unit (Unit): The unit that killed the dying unit. | Killing Ability (Ability): The ability that killed the dying unit. | Is Critical (Boolean): True if the ability was a critical, otherwise False. | . Unit is damaged This event is triggered every time a unit is damaged, regardless of faction or how it was damaged (e.g., it could be an ally, a monster, or the player itself). The event populates the following preset values: . | Damaged Unit (Unit): The unit that was damaged. | Damaging Unit (Unit): The unit that damaged the dying unit. | Damaging Ability (Ability): The ability that damaged the damaged unit. | Damage Dealt (Number): The amount of damage done by the ability. | Is Critical (Boolean): True if the ability was a critical, otherwise False. | . Unit is healed This event is triggered every time a unit is healed, regardless of faction or how it was healed (e.g., it could be an ally, a monster, or the player itself). The event populates the following preset values: . | Healed Unit (Unit): The unit that was healed. | Healing Unit (Unit): The unit that healed the unit. | . Unit gains resource This event is triggered every time a unit gains resource (except from base regeneration). The event populates the following preset values: . | Triggering Unit (Unit): The unit that gained sources. | Resources Gained (Number): The amount of resources gained. | . Unit loses resource This event is triggered every time a unit loses resource. The event populates the following preset values: . | Triggering Unit (Unit): The unit that lost sources. | Resources Gained (Number): The amount of resources lost. | . Player Events . Player gains experience This event is triggered every time the player gains experience. The event does not populate any preset values. Player gains a level This event is triggered every time the player gains a level. The event does not populate any preset values. Player sells an item This event is triggered every time the player sells an item through the shop. The event populates the following preset values: . | Triggering Item (Unit): The item that was sold. | . Player buys an item This event is triggered every time the player buys an item through the shop. The event populates the following preset values: . | Triggering Item (Unit): The item that was purchased. | . Player equips an item This event is triggered every time the player equips an item. The event populates the following preset values: . | Triggering Item (Unit): The item that was equipped. | . Player unequips an item This event is triggered every time the player unequips an item. The event populates the following preset values: . | Triggering Item (Unit): The item that was unequipped. | . Player picks up gold This event is triggered every time the player picks up gold. The event populates the following preset values: . | Gold Added (Number): The amount of gold collected. | . Player picks up a health globe This event is triggered every time the player picks up a health globe. The event populates the following preset values: . | Health Restored (Number): The amount of health restored. | . Region Events . Unit enters region This event is triggered when the player enters a region with a specific name. Use the text slot in the event to specify the exact region name. This must match the name on the region exactly. The event does not populate any preset values. Unit leaves region This event is triggered when the player leave a region with a specific name. Use the text slot in the event to specify the exact region name. This must match the name on the region exactly. The event does not populate any preset values. Projectile Events . Projectile collides with an enemy This event is triggered when a projectile spawned by this ability or item collides with an enemy of its owner. Note that for optimisation purposes, you cannot use this event to check if a projectile created from another source collided with an enemy. exactly. The event populates the following preset values: . | Event Projectile (Projectile): The projectile that collided. | Casting Unit (Unit): The unit that created the projectile. | Colliding Unit (Unit): The unit that was hit by the projectile. | . Projectile times out This event is triggered when a projectile spawned by this ability or item exceeds its assigned lifetime. Note that you must have first assigned a lifetime to the projectile via the Projectile &gt; Set Lifetime action. exactly. The event populates the following preset values: . | Event Projectile (Projectile): The projectile that is timing out. | Casting Unit (Unit): The unit that created the projectile. | . Projectile reaches its goal This event is triggered when a projectile spawned by this ability reaches its goal. This only triggers if the projectile was assigned a goal location, via the Projectile &gt; Move Projectile Towards Point action. The event populates the following preset values: . | Event Projectile (Projectile): The projectile that is timing out. | Casting Unit (Unit): The unit that created the projectile. | Goal Position (Location): The final gloal location. | Goal Unit (Unit): The goal unit. This is only assigned if the projectile was assigned to move towards a specific unit. | . Projectile collides with terrain This event is triggered when a projectile spawned by this ability/item collides with terrain (e.g., a wall). The event populates the following preset values: . | Event Projectile (Projectile): The projectile that collided with terrain. | Casting Unit (Unit): The unit that created the projectile. | . Quest Events . On quest received This event is triggered when the player receives a specific quest. Use the text slot in the event to specify the exact quest name. This must match the name of the quest exactly. The event does not populate any preset values. On quest completed This event is triggered when the player completes a specific quest. Use the text slot in the event to specify the exact quest name. This must match the name of the quest exactly.exactly. The event does not populate any preset values. Input Events . On key down This event is triggered when the player presses a specific key. Use the text slot in the event to specify the exact key. For simple keys, just enter the key (e.g., enter ‘f’ if you want to check for the f key being pressed). If you want to check more “complex” keybinds, refer to the lists in the discussion thread here. The event does not populate any preset values. On key up This event is triggered when the player releases a specific key. Use the text slot in the event to specify the exact key. For simple keys, just enter the key (e.g., enter ‘f’ if you want to check for the f key being pressed). If you want to check more “complex” keybinds, refer to the lists in the discussion thread here. The event does not populate any preset values. On key held This event is triggered when the player every frame while they are holding a specific key. Use the text slot in the event to specify the exact key. For simple keys, just enter the key (e.g., enter ‘f’ if you want to check for the f key being pressed). If you want to check more “complex” keybinds, refer to the lists in the discussion thread here. The event does not populate any preset values. ",
    "url": "/_pages/visual-coding/event-nodes.html",
    
    "relUrl": "/_pages/visual-coding/event-nodes.html"
  },"59": {
    "doc": "Events",
    "title": "Game Events",
    "content": "While you are not required to write any code in the development of your experience, if you need to implement complex logic for an item, ability, quest, or other game mechanic, this section will show you how it can be done. This page will focus specifically on how you can build an item with custom logic. ",
    "url": "/_pages/documentation/events.html#game-events",
    
    "relUrl": "/_pages/documentation/events.html#game-events"
  },"60": {
    "doc": "Events",
    "title": "Contents",
    "content": ". | Registering an Event Listener . | Callback Methods | Lamda Methods (In-line Logic) | . | Invoking an Event | Event List | . ",
    "url": "/_pages/documentation/events.html",
    
    "relUrl": "/_pages/documentation/events.html"
  },"61": {
    "doc": "Events",
    "title": "Registering an Event Listener",
    "content": "All of the events listed below are Unity event variables that can be accessed through the GameManager.events object. There are two ways that this can be done: (1) using a callback method, or (2) using an in-line lambda function. An example using both methods is shown below, in which the player restores 10 health every time a unit is killed. Callback Methods . You can register to have a specific method (with a matching signature) run when the event you are listening for is fired. In this case, we are using the OnUnitKilled event, so the method must have a signature of OnUnitKilledInfo. This OnUnitKilledInfo object contains details related to the event which you may need to consider in your actions (e.g., the unit that was killed, the killing unit, the source of the kill, whether it was a critical hit etc). public class RestoreHealthOnKillExample : MonoBehaviour { void Start() { GameManager.events.OnUnitKilled.AddListener(OnKillActions); } private void OnKillActions (OnUnitKilledInfo info) { GameManager.player.AddHealth(10); } } . Lamda Methods (In-line Logic) . Rather than creating a specific method with the correct signature to handle the logic, you can instead define the logic for the event listener in-line using a lambda function. In this example, whenever a unit is killed, the player will restore 10 health. This can save some space and make some logic easier to understand, but it can make the logic much harder to manipulate if you need to later de-register this event. For example, if this method should only be registered when an item is equipped, it will be more awkward to deregister it if the item is ever unequipped. public class RestoreHealthOnKillExample : MonoBehaviour { void Start() { GameManager.events.OnUnitKilled.AddListener(info =&gt; { GameManager.player.AddHealth(10); }); } } . ",
    "url": "/_pages/documentation/events.html#registering-an-event-listener",
    
    "relUrl": "/_pages/documentation/events.html#registering-an-event-listener"
  },"62": {
    "doc": "Events",
    "title": "Invoking an Event",
    "content": "It is unlikely you will need to do this, but if you need to trigger an event (rather than listen for an event occuring), you can manually invoke the event. To this with Unity Events, you use the Invoke method with an object of the correct type. For example, if you wanted to invoke the OnPlayerLevelUp event, you could invoke it by doing the following: . // Create the container storing all of the information. OnPlayerLevelUpInfo info = new OnPlayerLevelUpInfo(); // Populate all of the information needed for the container. info.player = GameManager.player; info.playerLevel = GameManager.player.level; // Invoke the event with the specified information. GameManager.events.OnPlayerLevelUp.Invoke(info); . ",
    "url": "/_pages/documentation/events.html#invoking-an-event",
    
    "relUrl": "/_pages/documentation/events.html#invoking-an-event"
  },"63": {
    "doc": "Events",
    "title": "Event List",
    "content": "Below provides a comprehensive list of all events used by the game, and the properties given related to each event. OnEventMessageReceived . This event can be used to broadcast generic messages to the entire game. This is intended to help send messages to the visual scripting system from coding (e.g., if your experience requires custom logic that is not handled by default). | Type | Variable | Description | . | string | messageText | The content of the message sent. | . OnAbilityCastStarted . This event is fired whenever a unit starts casting an ability. This event is fired with an OnAbilityCastStartedInfo object with the following variables: . | Type | Variable | Description | . | Unit | castingUnit | The unit casting the ability. | . | Ability | ability | The ability being cast. | . | Unit | targetUnit | The target of the ability (null if no target). | . | Vector3 | targetPosition | The target position of the ability. | . OnAbilityCastFinished . This event is fired whenever a unit finishes casting an ability. This event is fired with an OnAbilityCastFinishedInfo object with the following variables: . | Type | Variable | Description | . | Unit | castingUnit | The unit casting the ability. | . | Ability | ability | The ability being cast. | . | Unit | targetUnit | The target of the ability (null if no target). | . | Vector3 | targetPosition | The target position of the ability. | . OnUnitGainsBuff . This event is fired whenever a unit gains a buff/debuff. This event is fired with an OnUnitGainsBuffInfo object with the following variables: . | Type | Variable | Description | . | Unit | unitGainingBuff | The Unit that has gained the buff. | . | string | buffName | The name of the buff. | . | Unit | unitApplyingBuff | The unit that applied the buff. This can be null if it wasn’t applied by a unit. | . OnUnitLosesBuff . This event is fired whenever a unit loses a buff/debuff. This event is fired with an OnUnitLosesBuffInfo object with the following variables: . | Type | Variable | Description | . | Unit | unitGainingBuff | The Unit that has lost the buff. | . | string | buffName | The name of the buff. | . | Unit | unitApplyingBuff | The unit that applied the buff. This can be null if it wasn’t applied by a unit. | . OnUnitRefreshesBuff . This event is fired whenever a unit refreshes a buff/debuff. This event is fired with an OnUnitRefreshesBuffInfo object with the following variables: . | Type | Variable | Description | . | Unit | unitWithBuff | The Unit that has the buff. | . | string | buffName | The name of the buff. | . | Unit | unitApplyingBuff | The unit that applied the buff. This can be null if it wasn’t applied by a unit. | . OnUnitKilled . This event is fired whenever a unit is killed. This event is fired with an OnUnitKilledInfo object with the following variables: . | Type | Variable | Description | . | Unit | killedUnit | The Unit that was killed. | . | Unit | killingUnit | The unit that killed the killed unit. | . | bool | isCrit | Whether the effect that killed the unit was a critical strike. | . | IVisualCodeHandler | killingSource | The source that killed the unit (an ability, an item, etc). | . OnPlayerKilled . This event is fired whenever the player is killed. This event is fired with an OnPlayerKilledInfo object with the following variables: . | Type | Variable | Description | . | Unit | killedUnit | The Unit that was killed. | . | Unit | killingUnit | The unit that killed the killed unit. | . | bool | isCrit | Whether the effect that killed the unit was a critical strike. | . | IVisualCodeHandler | killingSource | The source that killed the unit (an ability, an item, etc). | . OnPlayerExperienceGained . This event is fired whenever the player gains experience. This event is fired with an OnPlayerExperienceGainedInfo object with the following variables: . | Type | Variable | Description | . | Player | player | The player that gained experience. | . | float | experienceGained | The amount of experience gained. | . OnPlayerLevelUp . This event is fired whenever the player gains a level. This event is fired with an OnPlayerLevelUpInfo object with the following variables: . | Type | Variable | Description | . | Player | player | The player that gained a level. | . | int | playerLevel | The new level of the player. | . OnPlayerEnteredRegion . This event is fired whenever a unit enters a region. This event is fired with an OnPlayerEnteredRegionInfo object with the following variables: . | Type | Variable | Description | . | Unit | enteringUnit | The unit that entered the region. | . | Region | region | The region that was entered. | . | string | regionName | The name of the region that was entered. | . OnPlayerExistsRegion . This event is fired whenever a unit exits a region. This event is fired with an OnPlayerExistsRegionInfo object with the following variables: . | Type | Variable | Description | . | Unit | exitingUnit | The unit that exited the region. | . | Region | region | The region that was exited. | . | string | regionName | The name of the region that was exited. | . OnUnitDamaged . This event is fired whenever a unit is damaged. This event is fired with an OnUnitDamagedInfo object with the following variables: . | Type | Variable | Description | . | Unit | damagedUnit | The unit that was damaged. | . | Unit | damagingUnit | The unit that did the damage. | . | bool | isCritical | Whether the damage dealt was a critical hit. | . | float | damage | The amount of damage that was dealt. | . | IVisualCodeHandler | damageSource | The source that did the damage (an ability, an item etc). | . OnUnitSpawned . This event is fired whenever a unit is spawned. This event is fired with an OnUnitSpawnedInfo object with the following variables: . | Type | Variable | Description | . | Unit | spawnedUnit | The unit that was spawned. | . | Unit | spawningUnit | The unit that spawned the unit. Can be null if it was not spawned by a unit. | . OnGoldAdded . This event is fired whenever the player gains gold. This event is fired with an OnGoldAddedInfo object with the following variables: . | Type | Variable | Description | . | float | goldAdded | The amount of gold that was added. | . OnGoldRemoved . This event is fired whenever the player loses gold. This event is fired with an OnGoldRemovedInfo object with the following variables: . | Type | Variable | Description | . | float | goldRemoved | The amount of gold that was removed. | . OnGoldPickedUp . This event is fired whenever the player picks up gold. This event is fired with an OnGoldPickedUpInfo object with the following variables: . | Type | Variable | Description | . | float | goldPickedUp | The amount of gold that was picked up. | . OnHealthPickedUp . This event is fired whenever the player picks up a health globe. This event is fired with an OnHealthPickedUpInfo object with the following variables: . | Type | Variable | Description | . | float | healthPickedUp | The amount of health that was picked up. | . OnItemEquipped . This event is fired whenever the player equips an item. This event is fired with an OnItemEquippedInfo object with the following variables: . | Type | Variable | Description | . | Item | itemEquipped | The item that was equipped. | . OnItemUnequipped . This event is fired whenever the player unequips an item. This event is fired with an OnItemUnequippedInfo object with the following variables: . | Type | Variable | Description | . | Item | itemUnequipped | The item that was unequipped. | . OnItemSold . This event is fired whenever the player sells an item. This event is fired with an OnItemSoldInfo object with the following variables: . | Type | Variable | Description | . | Item | itemSold | The item that was sold. | . OnQuestUpdated . This event is fired whenever a quest is updated. This event is fired with an OnQuestUpdatedInfo object with the following variables: . | Type | Variable | Description | . | Quest | questUpdated | The quest that was updated. | . OnQuestCompleted . This event is fired whenever a quest is completed. This event is fired with an OnQuestCompletedInfo object with the following variables: . | Type | Variable | Description | . | Quest | questCompleted | The quest that was completed. | . OnQuestAdded . This event is fired whenever a quest is added to the quest system. This event is fired with an OnQuestAddedInfo object with the following variables: . | Type | Variable | Description | . | Quest | questAdded | The quest that was added. | . OnGameWon . This event is fired whenever the player wins the game. This event is fired with an OnGameWonInfo object with the following variables: . | Type | Variable | Description | . | Player | player | The player that won the game. | . ",
    "url": "/_pages/documentation/events.html#event-list",
    
    "relUrl": "/_pages/documentation/events.html#event-list"
  },"64": {
    "doc": "Events",
    "title": "Events",
    "content": " ",
    "url": "/_pages/documentation/events.html",
    
    "relUrl": "/_pages/documentation/events.html"
  },"65": {
    "doc": "Game Manager",
    "title": "The Game Manager",
    "content": "While you are not required to write any code in the development of your experience, if you need to implement complex logic for an item, ability, quest, or other game mechanic, this section will show you how it can be done. This page will focus specifically on how you can build an item with custom logic. The experience can be developed without any code, but if you do want to use code to develop your items, abilities, quests or other content to control complex logic which cannot easi . ",
    "url": "/_pages/documentation/game-manager.html#the-game-manager",
    
    "relUrl": "/_pages/documentation/game-manager.html#the-game-manager"
  },"66": {
    "doc": "Game Manager",
    "title": "Contents",
    "content": ". | The Game Manager . | Unit Logic . | Ability Selection | Target Selection | Unit Range | . | Public Methods . | Modifying Unit Health | Modifying Unit Resources | Modifying Unit Abilities | Checking Unit Statuses | Moving a Unit | Visual Effects | Applying a Buff | Modifying a Stat | Modifying a Specific Unit Ability | Damaging a Unit | . | Download the Model | Import the Mixamo Model | Importing Mixamo Animations | Features | . | . ",
    "url": "/_pages/documentation/game-manager.html",
    
    "relUrl": "/_pages/documentation/game-manager.html"
  },"67": {
    "doc": "Game Manager",
    "title": "Unit Logic",
    "content": "Ability Selection . Non-player units will constantly try to . Target Selection . Unit Range . Unit . ",
    "url": "/_pages/documentation/game-manager.html#unit-logic",
    
    "relUrl": "/_pages/documentation/game-manager.html#unit-logic"
  },"68": {
    "doc": "Game Manager",
    "title": "Public Methods",
    "content": "You can interact with units via the public methods. These allow you to modify unit stats, visuals, and other key properties. Modifying Unit Health . // Add 100 to the unit's current health. unit.AddHealth(100); // Remove 100 from the unit's current health. unit.RemoveHealth(100); . Modifying Unit Resources . // Add 100 to the unit's current resource count. unit.AddResource(100); // Remove 100 from the unit's current resource count. unit.RemoveResource(100); . Modifying Unit Abilities . // Add the specified ability to the unit. unit.AddAbility(abilityTemplate); // Remove the specified ability from the unit. unit.RemoveAbility(abilityTemplate); // Replace the current specified ability with the specified ability. If the unit does // not have the 'current' ability, they will not get the new ability. unit.ReplaceAbility(currentAbilityTemplate, newAbilityTemplate); // Lock the given ability, preventing the unit from casting it. If the unit does not // have an ability with a matching template, this will do nothing. unit.LockAbility(abilityTemplate); // Unlock the given ability, allowing the unit to cast it. If the unit does not // have an ability with a matching template, this will do nothing. unit.UnlockAbility(abilityTemplate); . Checking Unit Statuses . // Check to see if the unit is currently stunned. bool isStunned = unit.IsStunned(); // Check to see if the unit is currently moving. bool isMoving = unit.IsMoving(); // Check to see if the unit is currently casting an ability. bool isCasting = unit.IsCasting(); // Check to see if the specified unit is an enemy of the unit. bool isEnemy = unit.IsEnemy(unitToCompare); // Check to see if the specified unit is an ally of the unit. bool isAlly = unit.IsAlly(unitToCompare); // Check to see if the unit has a specific buff/debuff. bool hasBuff = unit.HasBuff(\"NameOfBuff\"); // Check to see if the unit is currently able to move. bool canMove = unit.CanMove(); . Moving a Unit . // Instantly move the unit to the specified location. unit.Teleport(newPosition); // Smoothly move the unit to the specified location in the specified amount of time. unit.MoveOverTime(newPosition, timeToReachDestination); . Visual Effects . // Set the outline colour for the unit. unit.SetOutline(Color.red); // Set the outline colour and size for the unit. unit.SetOutline(Color.red, outlineSize, outlineAlpha); // Have the unit play the specified animation (the name must match a node in the Animator). unit.PlayAnimation(\"AnimationName\"); // Rotate the unit by the given amount (in degrees) over the given duration. unit.StartSpin(degreesToRotate, duration); . Applying a Buff . // Set the outline colour for the unit. unit.SetOutline(Color.red); // Set the outline colour and size for the unit. unit.SetOutline(Color.red, outlineSize, outlineAlpha); // Have the unit play the specified animation (the name must match a node in the Animator). unit.PlayAnimation(\"AnimationName\"); // Rotate the unit by the given amount (in degrees) over the given duration. unit.StartSpin(degreesToRotate, duration); . Modifying a Stat . // Permanently modifies the movement speed of the unit. In this case, // it will increase the movement speed of the unit by 20%. // // Valid Stats include: // - Damage // - MaxHealth // - MaxResource // - CriticalStrikeChance // - CriticalStrikeDamage // - Armor // - AttacksPerSecond // - CooldownReduction // - MovementSpeed // - ResourceCostReduction // - ResourceGeneration unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f); // Temporarily modifies the movement speed of the unit. In this case, // it will increase the movement speed of the unit by 20% for 10 seconds. unit.stats[Stat.MovementSpeed].AddTimedPercentageModifier(1.2f, 10.0f); // A buff name can also be given when applying a buff or debuff. This lets you // reference it later if you want to remove or modify it (e.g., an ability may // give the player a movement speed boost until they next take damage). unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f, \"Sprint\"); // If a buff name is given, a maximum number of buff 'stacks' can also be specified. // This limits how many times this effect can be applied to the unit. In this case, // the unit can have three sprint modifiers applied (resulting in a 60% speed increase). unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f, \"Sprint\", 3); // This method can be used to remove all existing modifiers with a matching label. unit.stats[Stat.Damage].RemoveModifiersWithLabel(\"Sprint\"); // A stat modifier can also be a specific value, rather than a percentage. In this case, // the base damage of all attacks is increased by 5 instead of a percentage modifier. unit.stats[Stat.Damage].AddValueModifier(5); . Modifying a Specific Unit Ability . // Modifies the damage of the specified ability on the specified unit. // In this example, the ability would do 50% more damage. unit.AddAbilityDamageModifier(ability, 1.5f); // Modifies the cooldown of the specified ability on the specified unit. // In this example, the ability cooldown will be reduced by 50%. unit.AddAbilityCooldownModifier(ability, 0.5f); // Modifies the cost of the specified ability on the specified unit. // In this example, the ability would be reduced to 10% of its current cost. unit.AddAbilityCostModifier(ability, 0.1f); // Just like with stat modifiers, the ability modifiers can also be timed. // In this example, the ability would deal double damage for five seconds. unit.AddTimedAbilityDamageModifier(ability, 2.0f, 5.0f); // Just like with stat modifiers, the ability modifiers can also be given a // reference name, and a maximum stack count. unit.AddTimedAbilityDamageModifier(ability, 2.0f, 5.0f, \"Frenzy\", 1); // Use this method to remove all ability modifiers from an ability which have // the given reference name (e.g., this would remove the frenzy buff in the previous example). unit.RemoveAbilityBuffModifiers(ability, \"Frenzy\"); . Damaging a Unit . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . ",
    "url": "/_pages/documentation/game-manager.html#public-methods",
    
    "relUrl": "/_pages/documentation/game-manager.html#public-methods"
  },"69": {
    "doc": "Game Manager",
    "title": "Download the Model",
    "content": ". | Go to Mixamo. | Log in, or create a new account if you do not already have one. | Select or upload your character model. | Customize the animation if needed by selecting from the animations available. | Click the Download button. | Choose the following options for Unity: . | Format: FBX for Unity. | Pose: T-Pose. | Animation: If you want to include the animation, make sure it’s selected. | Skin: With Skin. | . | Click the Download button in the popup. | . ",
    "url": "/_pages/documentation/game-manager.html#download-the-model",
    
    "relUrl": "/_pages/documentation/game-manager.html#download-the-model"
  },"70": {
    "doc": "Game Manager",
    "title": "Import the Mixamo Model",
    "content": ". | Open your Unity project. | In the Project window, navigate to the folder you want to import the model into. | Drag the downloaded FBX file into the Unity folder, or right-click and select Import New Asset to locate and import the file manually. | Once imported, select the model in the Project window. | In the Inspector, go to the Model tab and ensure the Animation Type is set to Humanoid (for human-like characters) or Generic (for other types of models). | Under the Material section, if you’re using the legacy shader, check Import Materials and Use Legacy Materials to ensure proper texture mapping. This will help the model use the correct materials that were imported with the FBX. | Click Apply. | . ",
    "url": "/_pages/documentation/game-manager.html#import-the-mixamo-model",
    
    "relUrl": "/_pages/documentation/game-manager.html#import-the-mixamo-model"
  },"71": {
    "doc": "Game Manager",
    "title": "Importing Mixamo Animations",
    "content": ". | Go to Mixamo.com. | Log in, or create a new account if you do not already have one. | . Mixamo models use different avatars for defining animations. This means that an animation shown on one character may not look correct if it is applied to a different character. If you encounter this problem, you should use a T-Pose for the avatar instead. dfgdfgdfg . ",
    "url": "/_pages/documentation/game-manager.html#importing-mixamo-animations",
    
    "relUrl": "/_pages/documentation/game-manager.html#importing-mixamo-animations"
  },"72": {
    "doc": "Game Manager",
    "title": "Features",
    "content": ". | Clean layout | Responsive design | Easy to use | . Default label . Blue label . Stable . New release . Coming soon . Deprecated . ",
    "url": "/_pages/documentation/game-manager.html#features",
    
    "relUrl": "/_pages/documentation/game-manager.html#features"
  },"73": {
    "doc": "Game Manager",
    "title": "Game Manager",
    "content": " ",
    "url": "/_pages/documentation/game-manager.html",
    
    "relUrl": "/_pages/documentation/game-manager.html"
  },"74": {
    "doc": "General Editor",
    "title": "General Editor",
    "content": "The general editor in the visual coding system allows you to add general logic to your experience, that isn’t specific to an ability, item, or other specific component. It can be used to create bespoke tutorialisation, events, or custom gameplay logic that your experience may require. ",
    "url": "/_pages/visual-coding/general-editor.html",
    
    "relUrl": "/_pages/visual-coding/general-editor.html"
  },"75": {
    "doc": "General Editor",
    "title": "Contents",
    "content": ". | Opening the General Editor | General Editor Recommendations | . ",
    "url": "/_pages/visual-coding/general-editor.html",
    
    "relUrl": "/_pages/visual-coding/general-editor.html"
  },"76": {
    "doc": "General Editor",
    "title": "Opening the General Editor",
    "content": "To open the General Editor, go to the top menu bar, and select IGB190 &gt; Open Custom Windows. Script Explanation . In the above example, the script handles the logic for when the boss is killed. When a unit is killed, the script checks to see if it is the boss, and if so, it performs some actions: first it flags that the player has won the game, then it changes the game music and completes a quest. ",
    "url": "/_pages/visual-coding/general-editor.html#opening-the-general-editor",
    
    "relUrl": "/_pages/visual-coding/general-editor.html#opening-the-general-editor"
  },"77": {
    "doc": "General Editor",
    "title": "General Editor Recommendations",
    "content": "On the left you can create new “Game Logic Blocks”, with each containing a collection of visual scripts. For this reason, it is recommended that you group related logic into the same game logic block. For example, you may want to have one block per quest, one block per tutorial stage, or for each unique game system. This isn’t required, but it will make the code for your game much easier to manage as you get further into development. ",
    "url": "/_pages/visual-coding/general-editor.html#general-editor-recommendations",
    
    "relUrl": "/_pages/visual-coding/general-editor.html#general-editor-recommendations"
  },"78": {
    "doc": "General Guides",
    "title": "General Guides",
    "content": "This section contains guides which may be helpful to the development of your game, but aren’t specific to the IGB190 experience you will be making. Browse some of the guides found below. ",
    "url": "/_pages/general-guides/general-guides.html",
    
    "relUrl": "/_pages/general-guides/general-guides.html"
  },"79": {
    "doc": "Balancing",
    "title": "Balancing",
    "content": "In this page, you will learn about some of the common ways to manipulate the balance of your game. ",
    "url": "/_pages/igb190-guides/guide-balance.html",
    
    "relUrl": "/_pages/igb190-guides/guide-balance.html"
  },"80": {
    "doc": "Balancing",
    "title": "Contents",
    "content": ". | Updating Monster Attributes | Updating Player Attributes | Updating Monster Spawning . | Controlling the Amount of Monsters Spawned | Advanced Spawning Logic | . | . ",
    "url": "/_pages/igb190-guides/guide-balance.html",
    
    "relUrl": "/_pages/igb190-guides/guide-balance.html"
  },"81": {
    "doc": "Balancing",
    "title": "Updating Monster Attributes",
    "content": "To update monster attributes, go to the Assets to Use &gt; Monsters folder. Select any of the monsters in this folder, and then go to the Monster component in the inspector. At the top of the component, you will see a variety of values you can change here. These control all major aspects of the monster’s attributes. Attribute Description Summary Here is a brief description for each of the main attributes for a monster: . | Damage: The damage done by the monsters. All monster attacks will deal damage as a modifier of this (e.g., a big attack may deal 200% of their base damage). | Health: The maximum amount of health that the monster will have. | Resource: The maximum amount of resource that the monster will have. This only matters if the monster will be consuming resources for attacks. | Movement Speed: Controls how quickly the monster will move. | Base Armor: Controls how much armor the monster will have. The effect of armor will be determined by the damage formula that you personally implement for your experience. | Base Critical Strike Chance: Determines the critical strike chance for the unit, as a percentage (e.g., 0.1 = 10% critical chance). | Base Critical Strike Damage: Determines the bonus damage when the monster scores a critical hit, as a percentage (e.g., 0.5 = 50% additional damage on each critical). | Base Health Regen: The amount of health that the monster will regenerate per second. | Base Resource Regen: The amount of resource that the monster will regenerate per second. | Base Attack Range: The melee attack range of the unit. Larger units should have a bigger attack range. | Abilities: The list of abilities the monsters can cast. The default monsters come with a basic Slash ability for melee monsters, and a Shoot ability for ranged monsters. | . ",
    "url": "/_pages/igb190-guides/guide-balance.html#updating-monster-attributes",
    
    "relUrl": "/_pages/igb190-guides/guide-balance.html#updating-monster-attributes"
  },"82": {
    "doc": "Balancing",
    "title": "Updating Player Attributes",
    "content": "The player uses many of the same attributes as the monsters. You can select the player characters from the scene heirarchy. All of the monster attributes you found on the monster, such as damage and movement speed, can also be found on the Player component (as they both inherit from the Unit script). Additionally, the player also has several options for scaling, which can be found at the bottom of the Player class. These are the additional attributes that the player will gain every time they gain a level. ",
    "url": "/_pages/igb190-guides/guide-balance.html#updating-player-attributes",
    
    "relUrl": "/_pages/igb190-guides/guide-balance.html#updating-player-attributes"
  },"83": {
    "doc": "Balancing",
    "title": "Updating Monster Spawning",
    "content": "Rather than placing monsters manually into the level, the game can automatically spawn monsters with appropriate spawn effects as the player enters certain areas. It does this using invisible spawn boxes placed in each of the example level tiles. These spawn boxes are already included in all of the example tiles, and can be found by expanding the tile and selecting the SpawnArea GameObjects. If you want to set up your own spawn areas, each spawn area just needs to have a box collider with isTrigger set to True, and a SpawnArea component. Controlling the Amount of Monsters Spawned . The amount of monsters spawned by spawn boxes is determined by the spawn density of your game. You can adjust the global spawn density by selecting the GameManager, and going to the MonsterSpawnManager component. By default, the spawn density is set to 1. This is a multiplicative modifier which will affect all spawn boxes. Setting this value to 2 will spawn twice as many monsters. You can also specify the types of enemies which can be spawned by the spawn areas here. Only monsters included in the “Monsters To Spawn” list will be considered. If you want to change the spawn density for a particular box (e.g., you want it to be a difficult area which spawns twice as many enemies), you can also adjust the spawn density for a specific spawn area by modifying the Spawn Density value on that specific SpawnArea component. Empowered Monsters . This describes the total number of empowered monsters which will spawn. E.g., a value of 1 will spawn exactly one empowered monster in that area. Spawn Density . This is a modifier which affects the density of this specific spawn area. Specifying a value of 2 here would cause the spawn area to cause twice as many monsters as a value of 1 (but only for this exact spawner). Empowered Monsters . This describes the total number of empowered monsters which will spawn. E.g., a value of 1 will spawn exactly one empowered monster in that area. Advanced Spawning Logic . You can also change how likely a specific monster is to spawn, and the types of monsters each spawner can spawn, by adjusting the properties on each monster. Select a monster in your game (monsters are found in Assets to Use &gt; Monsters). Go to the Monster component, and scroll to the bottom. You will find a header for ‘Spawn Data’. Spawn Level . The spawn level specified on the monster is used by the spawners to control what types of monsters it can spawn. On the SpawnArea component, you can select a maximum monster level that the spawner will spawn. For example, a spawner with a maximum spawn level of 5 would not be able to spawn a monster that you’ve set to level 7 here. Spawn Likelihood . The spawn likelihood determines how likely the monster is to spawn. If one monster hasd a spawn likelihood of 1, and another has a spawn likelihood of 3, the second monster will spawn three times as often. Note that this does not change the total number of monsters that get spawned, but just the distribution of their types. ",
    "url": "/_pages/igb190-guides/guide-balance.html#updating-monster-spawning",
    
    "relUrl": "/_pages/igb190-guides/guide-balance.html#updating-monster-spawning"
  },"84": {
    "doc": "Changing the Controls",
    "title": "Changing the Controls",
    "content": "In this guide, you will learn how to change the controls for the experience. ",
    "url": "/_pages/igb190-guides/guide-controls.html",
    
    "relUrl": "/_pages/igb190-guides/guide-controls.html"
  },"85": {
    "doc": "Changing the Controls",
    "title": "Contents",
    "content": ". | Control Flexibility | Default Controls | Saved Controls | . ",
    "url": "/_pages/igb190-guides/guide-controls.html",
    
    "relUrl": "/_pages/igb190-guides/guide-controls.html"
  },"86": {
    "doc": "Changing the Controls",
    "title": "Control Flexibility",
    "content": "While the experience allows you to adjust the default keybinds of the game, you should avoid making fundamental adjustments to the control scheme (such as changing to WSAD movement or overhauling the perspective of the camera). You are being tasked to work on very specific parts of the project (as part of a larger fictional game studio) and making broad adjustments to this would be outside the scope of the work they have assigned to you. ",
    "url": "/_pages/igb190-guides/guide-controls.html#control-flexibility",
    
    "relUrl": "/_pages/igb190-guides/guide-controls.html#control-flexibility"
  },"87": {
    "doc": "Changing the Controls",
    "title": "Default Controls",
    "content": "You can change the default controls by selecting the GameManager in the scene heirarchy and going to the Settings foldout. This contains some basic properties for the game, such as audio volume, and UI settings. At the bottom of this window, however, you will find the Keybinds for the game. The Settings script details which keybind corresponds with each ability slot, but this is not intuitive to control via the inspector, so the exact mappings are: . | Element 0: This is the keybind for the first ability in the Player’s ability list. | Element 1: This is the keybind for the second ability in the Player’s ability list. | Element 2: This is the keybind for the third ability in the Player’s ability list. | Element 3: This is the keybind for the fourth ability in the Player’s ability list. | Element 4: This is the keybind for the fifth ability in the Player’s ability list. | Element 5: This is the keybind for the sixth ability in the Player’s ability list. | Element 6: This is the Force Hold keybind. This will prevent the player from moving, which can be useful if you’re trying to attack without accidentally having the character move. | Element 7: This is the Force Move keybind. This will force the character to move, and will not attack an enemy, even if the player is hovered over one. | . Force Move and Force Hold . Force Move and Force Hold are extremely useful keys in most ARPGs. They provide much more control over movement and make the character actions feel more responsive for the user. ",
    "url": "/_pages/igb190-guides/guide-controls.html#default-controls",
    
    "relUrl": "/_pages/igb190-guides/guide-controls.html#default-controls"
  },"88": {
    "doc": "Changing the Controls",
    "title": "Saved Controls",
    "content": "If you are changing the default controls for the game, but the keybinds aren’t updating, this is because your previous controls have been saved. The game will save the current controls every time the user exits play mode (or closes the game). Controls are saved into a Settings.json file. If you are in the Unity Editor, the default save location is in the root of your project. This will place the file alongside the Assets and Library folders. In Unity Builds, the file will instead be saved next to the executable. This means that if you are looking to test updated controls in your experience, you will need to delete this file, update the default settings, and then play the game. Alternatively, you can instead change the current keybind settings in the game itself. You can do this by starting the game, pressing the Escape key, then going to Options. ",
    "url": "/_pages/igb190-guides/guide-controls.html#saved-controls",
    
    "relUrl": "/_pages/igb190-guides/guide-controls.html#saved-controls"
  },"89": {
    "doc": "Creating an Ability",
    "title": "Creating an Ability",
    "content": "In this guide, you will learn how to create and implement abilities into your experience. ",
    "url": "/_pages/igb190-guides/guide-createability.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createability.html"
  },"90": {
    "doc": "Creating an Ability",
    "title": "Contents",
    "content": ". | Example Custom Ability #1: Fireball | Example Custom Ability #2: Toxic Rage Potion | Example Custom Ability #3: Knife Barrage | Example Custom Ability #4: Preparation | . ",
    "url": "/_pages/igb190-guides/guide-createability.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createability.html"
  },"91": {
    "doc": "Creating an Ability",
    "title": "Example Custom Ability #1: Fireball",
    "content": ". | Open the Ability Editor by selecting IGB190 &gt; Open Custom Windows from the top menu of Unity, then go to the Ability Editor tab. | Right-click on the ‘Shoot’ ability and select Copy. Name the new ability Fireball. | Change the ability description to “Throws a fireball at the target location, damaging all nearby monsters for 200% attack damage.” . | Change the icon to something resembling a fireball by pressing the ‘Select’ button in the bottom-right of the icon. | This ability is quite strong (if you balance around a standard attack doing 100% of attack damage), so it should be given a resource cost or cooldown. Update the Resource Cost to 15. | Next, we need to change the visuals of the ability. In the ability logic, the first line chooses which projectile to spawn. Click on the Arrow projectile, and change it to Fire Projectile &gt; Orange Fire Projectile. | Finally, try adding the ability to a player and test it. You should now be able to use the ability in-game and have it fire the updated projectile. | While this ability is functional, it currently only hits one specific target. While we updated the tooltip that the player reads, this currently doesn’t reflect the projectile behaviour. | Go to the Fireball ability in the Ability Editor and select the Unit Collision script. This script controls what will happen when the projectile collides with an enemy of the caster. Currently, it just does 100% of the caster’s attack damage to the unit and destroys the projectile This needs to be updated to deal damage in an area instead. | Select the damage action and press the Delete key (or right-click and select Delete). | Now press the blue ‘+’ button in the Actions header. Select the Unit &gt; Deal Damage to Unit Group action. | Click on the ‘100%’ box and update the damage to be ‘200%’ (to match the ability tooltip you wrote earlier). | Click on the Unit Group box. This lets you specify which units should be in the damaged. Select the All Enemies Near Point function. In the first box, you can now specify how far away the enemies can be. Enter 2 (which will find all enemies within 2m). For the “Location”, select Projectile &gt; Position of Projectile. Click on the Projectile box and specify the Event Projectile preset as the projectile to use in the check. | . The logic for this ability should now be complete, and look like the image shown above. Try the ability now! When the fireball collides with a monster, it should damage all monsters within two meters. ",
    "url": "/_pages/igb190-guides/guide-createability.html#example-custom-ability-1-fireball",
    
    "relUrl": "/_pages/igb190-guides/guide-createability.html#example-custom-ability-1-fireball"
  },"92": {
    "doc": "Creating an Ability",
    "title": "Example Custom Ability #2: Toxic Rage Potion",
    "content": "Another action which you may commonly want to do when creating abilities is to buff the player (e.g., increasing their damage, movement speed, attack speed, etc), or debuffing the monsters. For this ability, you will create a Toxic Rage Potion which will increase the damage done by the player for the next 10 seconds, but also increase the damage they take. | Right click on the Healing Potion ability, and select Copy to make a copy of it. Name it Toxic Rage Potion. | Change the tooltip to “Increases your damage done and damage taken by 100% for 10 seconds.” . | Choose an appropriate icon for the ability. | In the ability logic, change the Green Swirls effect to Swirls &gt; Red Swirls instead. This will ensure that it has a different visual to the regular health potion. | Delete the first action which adds health to the unit. Your logic should now look like the following: . | Add a new action by pressing the ‘+’ button in the Actions header. Select Unit &gt; Increase Stat &gt; Increase Stat on Unit by Percent. Select the Unit box, and choose the Casting Unit preset. Select the Percent box, and enter 100. Select the 5s duration and change it to 10 instead. | Select this buff action and Press Ctrl+C to copy it, and then Ctrl+V to paste it. Select the Damage box and change it to Damage Taken instead. | The potion should now have the correct effect. Add the ability to the player and try it out (the correct logic is shown below). | . Buff Names and Maximum Stacks . You do not need to enter a Buff Name, but if you want to be able to remove the buff without waiting for it to timeout, you will need to give it a name you can refer to later. Additionally, if you want to limit the number of concurrent applications, you will need to give it a name and set the maximum number of stacks to your desired value. For example, you may have an ability that increases the movement speed of the caster by 25% for 3s, but it can stack up to three times (for a total of 75% movement speed). ",
    "url": "/_pages/igb190-guides/guide-createability.html#example-custom-ability-2-toxic-rage-potion",
    
    "relUrl": "/_pages/igb190-guides/guide-createability.html#example-custom-ability-2-toxic-rage-potion"
  },"93": {
    "doc": "Creating an Ability",
    "title": "Example Custom Ability #3: Knife Barrage",
    "content": "This ability will showcase how you can use loops and waits to create some interesting effects. We are once again going to use the “Shoot” base ability, but we will update it so that it will periodically fire arrows towards the target location. | Right click on the Shoot ability, and select Copy to make a copy of it. Name it Knife Barrage. | Update the icon to something appropriate for the ability. | Change the tooltip to “Throw a knife towards the target location every 0.5 seconds for 10 seconds. Knives do 100% attack damage to the first monster they hit.” . | We don’t want this ability to be spammable, so uncheck the Cooldown is Attack Speed option. This lets you set a custom cooldown. Change the Cooldown to 10 seconds. | Disable Update Target While Casting. This option allows the ability to choose its final destination location at the end of the cast, rather than at the start. This can help make melee abilities feel responsive, but isn’t ideal for ranged abilities where the player may start the cast and then want to prepare to run away after it finishes. | Next, in the ability logic, change the projectile being spawned from Arrow to Other &gt; Knife. | Click on the ‘+’ button in the Actions header to add a new action. Select Flow &gt; For Loop. In the “Number” slot, enter “20” (there will be two arrows every second for 10 seconds). | Drag the three above actions so that they are under/inside the loop. When you are done, it should look like below. | Finally, click on the + button on the loop action. Select Flow &gt; Wait. In the Number slot, enter 0.5. This will cause the logic to wait for 0.5 seconds before continuing. The final logic should look like the following: . | Add this ability to the player, and then try it out. The character should now throw 20 arrows towards the cast location, with a half-second delay between each. | . ",
    "url": "/_pages/igb190-guides/guide-createability.html#example-custom-ability-3-knife-barrage",
    
    "relUrl": "/_pages/igb190-guides/guide-createability.html#example-custom-ability-3-knife-barrage"
  },"94": {
    "doc": "Creating an Ability",
    "title": "Example Custom Ability #4: Preparation",
    "content": "This ability will show you how you can create complementary logic to support an ability. Specifically, this ability will restore all resources to the caster and increase their attack speed by 100% until the caster next moves. | Right click on the Healing Potion ability and select Copy. Name the new ability Preparation. | Update the tooltip to read “Restore all resources and increase attack speed by 100% until the caster next moves.” . | Delete the add health action in the ability logic. | Change the Green Swirls effect to Swirls &gt; Yellow Swirls. | Press the ‘+’ button in the Actions header to add a new action. Select Unit &gt; Add Resource. Change the 100 to 9999 to have it (usually) restore the caster to maximum resource. | Press the + button in the Actions header to add a new action. Select Unit &gt; Increase Stat &gt; Increase Stat on Unit by Percent. Change the increased stat from Damage to Attack Speed. Change the Unit to the Casting Unit preset. Change the Percent to 100. Change the 5s to 0 (zero means lasts forever). Change the buff name from None to Preparation. It should now look as follows: . | At the top of the window, press the Create New button to create a new script. Name the new script “Remove Preparation on Move”. | . | Click on the + in the events header to add a new event. Select Time &gt; Do every frame. | Click on the + in the conditions header to add a new condition. Select Unit &gt; Unit is Moving condition. Change the Unit slot to the Ability Owner preset. | Click on the + in the actions header to add a new action. Select Unit &gt; Remove Buff. Change the buff name to Preparation and change the Unit slot to the Ability Owner preset again. The complete script should now look as follows: . | Save the ability by pressing Ctrl+S, then add the ability to a player and test it. After casting it, the player should now have 100% increased attack speed, but lose it when they next move. | . Using Additional Scripts in Ability Logic . You may want to consider using additional scripts if your abilities have more complex logic. For example, you could have an extra script which reduces the cooldown of the ability whenever the player gets a critical hit, or does something else when the player kills a unit or takes damage. Giving the player a timed effect: If you want to have an ability with a prolonged custom effect (e.g., having the player restore health while moving, or generating resources when they’re attacked), you can achieve this by give them a buff using the Unit &gt; Increase Stat &gt; Increase Stat on Unit by Percent action, and leaving the modifier at 0% (you are just using it to specify a named buff). Then, in a separate script, you can check to see if the ability owner has that buff using the Unit &gt; Unit Has Buff condition, and only do your custom logic if they do. ",
    "url": "/_pages/igb190-guides/guide-createability.html#example-custom-ability-4-preparation",
    
    "relUrl": "/_pages/igb190-guides/guide-createability.html#example-custom-ability-4-preparation"
  },"95": {
    "doc": "Creating an Item",
    "title": "Creating an Item",
    "content": "In this guide, you will learn how to create and implement items into your experience. ",
    "url": "/_pages/igb190-guides/guide-createitem.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createitem.html"
  },"96": {
    "doc": "Creating an Item",
    "title": "Contents",
    "content": ". | Item Overview | Item Attributes | Adjusting Monster Drop Rates | Creating an Item | . ",
    "url": "/_pages/igb190-guides/guide-createitem.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createitem.html"
  },"97": {
    "doc": "Creating an Item",
    "title": "Item Overview",
    "content": "Items come in one of three rarities: Common, Rare, and Legendary. The rarity of an item determines its drop chance and provides a rough indicator of how “good” an item is. Drop rates can be modified by adjusting the monster properties in the GameManager object within the Main scene. There are five types of items that can be equipped. These are weapons, amulets, armor, boots, and rings. There is a sixth “Other” type which can be used to create non-equippable items. For example, the game may not allow a player to open a door until they have a key in their inventory. The player can equip one of each of the item types, except for rings which allow two to be equipped at once. Players equip items by dragging them from their inventory onto the appropriate slot on their character. ",
    "url": "/_pages/igb190-guides/guide-createitem.html#item-overview",
    
    "relUrl": "/_pages/igb190-guides/guide-createitem.html#item-overview"
  },"98": {
    "doc": "Creating an Item",
    "title": "Item Attributes",
    "content": ". Items will modify the attributes/stats of the player. There are many different stats an item may modify, but not all stats should necessarily be available on all item types. | Max Health (e.g., +50 Maximum Health) | Max Health Percent (e.g., +20% Maximum Health) | Resource (e.g., +50 Maximum Rage) | Resource Percent (e.g., +20% Maximum Rage) | Damage (e.g., +10 Damage) | Damage Percent (e.g., +20% Damage) | Movement Speed Percent (e.g., +20% Movement Speed) | Attack Speed Percent (e.g., +20% Attack Speed) | Critical Strike Chance (e.g., +10% Critical Strike Chance) | Critical Strike Damage (e.g., +50% Critical Strike Damage) | Armor (e.g., +50 Armor) | Resource Cost Reduction (e.g., -20% Ability Resource Cost) | Resource Regeneration (+20% Rage Generation) | Damage Reduction Percent (e.g., -20% Damage Taken) | . ",
    "url": "/_pages/igb190-guides/guide-createitem.html#item-attributes",
    
    "relUrl": "/_pages/igb190-guides/guide-createitem.html#item-attributes"
  },"99": {
    "doc": "Creating an Item",
    "title": "Adjusting Monster Drop Rates",
    "content": "To adjust the drop rate of items from monsters, select the Game Manager in the scene heirarchy. Expand out the Monster Values foldout. This contains three sliders - each controlling the drop chance for each item rarity. Monsters will only ever drop a maximum of one item. If a monster has a 100% chance to drop a common item, and a 50% chance for a rare item, half the time the drop will be common item, and half the time it will be rare item. Empowered monsters have a different item drop chance. Go to the Empowered Monster Values foldout. This contains another three sliders. This can be very useful for designing exactly how you intend for rewards to be given to the player. For example, if you have a very low item drop chance from regular enemies, but guaranteed item drops from empowered enemies, players are encouraged to “hunt” empowered monsters. ",
    "url": "/_pages/igb190-guides/guide-createitem.html#adjusting-monster-drop-rates",
    
    "relUrl": "/_pages/igb190-guides/guide-createitem.html#adjusting-monster-drop-rates"
  },"100": {
    "doc": "Creating an Item",
    "title": "Creating an Item",
    "content": "To create an item, open the item editor by selecting IGB190 &gt; Open Custom Windows from the top Unity menu. Go to the Item tab. This is the visual editor for creating items. To create a new item, press the + button just above the list of items on the left panel. Give the new item a name. You can then modify the properties on the item. Below is a summary of the main item properties. | Item Icon: To change the item icon, press the Select button in the bottom-right corner, and choose the icon you want to use. | Item Tooltip: Use the tooltip to describe any custom features for the item. Stats will be automatically populated when the items is “rolled”. You can safely leave this blank. | Tag: You can assign a tag to the item. For example, you could have a “Cursed” tag, and then a legendary item may check how many cursed items the player has equipped. You can safely leave this blank. | Class Required: If you only want the item to drop for a specific class, enter the name of the class here (e.g., Barbarian). | Min Drop Level: This determines when the item can drop. If the item has a mnimimum drop level of 5, but the player is only level 3, it is not possible for this item to drop. | Can Purchase in Shop: If your game contains custom legendaries, you may not want the player to be able to directly buy these. In this case, you can set this property to False. | Can Drop from Monster: If your game contains custom legendaries, you may not want those legendaries to drop randomly (because they should drop at specific points in the experience). In this case, you should set this to False. | Purchase Cost: The cost to purchase this item from the shop. | . Finally, you need to specify the items can have. The game uses a “roll” system, where items can randomly roll various stats, and those stats have specific state ranges. For example, one copy of an item could come with +10 damage while another comes with +50 Armor. Items can have two types of stats: guaranteed, and randomisable. | Guaranteed Stats: These are stats which the item will always have. For example, you may want a pair of boots to always come with increased movement speed. To add a guaranteed stat to an item, press the ‘+’ button and choose the stat that it should have. You then need to specify the range for that stat. | Randomisable Stats: These are the stats which the item could have. When an item is rolled, it chooses an amount of stats from this list equal to the value you have listed in the Random Stats input box above. | . In the above example, the item will always have Damage, and will come with two of the following: Max Health, Attack Speed %, and Movement Speed %. After you have chosen appropriate stats for the item, the item should now be completely set up and integrated into your experience. ",
    "url": "/_pages/igb190-guides/guide-createitem.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createitem.html"
  },"101": {
    "doc": "Creating a Legendary Item",
    "title": "Creating a Legendary Item",
    "content": "In this guide, you will learn how to create and implement custom legendary items into your experience. ",
    "url": "/_pages/igb190-guides/guide-createlegendaryitem.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createlegendaryitem.html"
  },"102": {
    "doc": "Creating a Legendary Item",
    "title": "Contents",
    "content": ". | Designing Legendary Items | Planning Legendary Drops | Example Legendary: Blood Drinker | Example Legendary: Mistwalkers | Example Legendary: Revitalising Band | Example Legendary: Shining Bulwark | . ",
    "url": "/_pages/igb190-guides/guide-createlegendaryitem.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createlegendaryitem.html"
  },"103": {
    "doc": "Creating a Legendary Item",
    "title": "Designing Legendary Items",
    "content": "Legendary items are powerful items which change the way the character “feels” to play. They should encourage the player to consider different moment-to-moment gameplay loops and add variety to the experience. The combination of character abilities and a collection of unique legendary items should form a synergistic build. For example, they may encourage the player to: . | Take damage or stay on low health. | Fight lots of enemies at once. | Avoid taking damage. | Focus on a particular build, like critical strikes. | Have a drawback which must be managed (e.g., higher resource costs). | . Creating these effects will often require you to code additional custom logic, beyond the standard stats that items typically have. ",
    "url": "/_pages/igb190-guides/guide-createlegendaryitem.html#designing-legendary-items",
    
    "relUrl": "/_pages/igb190-guides/guide-createlegendaryitem.html#designing-legendary-items"
  },"104": {
    "doc": "Creating a Legendary Item",
    "title": "Planning Legendary Drops",
    "content": "Legendary items should be powerful, build-defining, items. Given this, you should carefully control when the player can acquire these items. | If you plan on having them be random drops, you should limit when they can drop. You can do this by specifying the Min Drop Level on the item. | If you plan to have them drop from quests or off specific monsters, you should carefully plan when the player will acquire these items. | If you plan to have these items be purchased from the shop, you should carefully consider how much the player will need to pay to acquire them. | . It is important that the items aren’t too rare either though. If the player is unable to finish their build and play with it before the end of the game, they will likely leave your experience unsatisfied. ",
    "url": "/_pages/igb190-guides/guide-createlegendaryitem.html#planning-legendary-drops",
    
    "relUrl": "/_pages/igb190-guides/guide-createlegendaryitem.html#planning-legendary-drops"
  },"105": {
    "doc": "Creating a Legendary Item",
    "title": "Example Legendary: Blood Drinker",
    "content": "The first example of a legendary item is Blood Drinker, a legendary weapon. It will have a custom effect which will heal you whenever you kill a monster. Here is the logic required to set it up: . | Add a new Event by pressing the + in the events header. Select the Unit &gt; Unit is killed event. | Add a new Condition by pressing the + in the events header. Select the Comparisons &gt; Unit Comparison condition. In the first unit block, select the Killing Unit preset. In the second unit block, select the Item Owner preset. | Add a new Action by pressing the blue + in the actions header. Select the Unit &gt; Add Health action. In the number block, enter 10. | . When you are done, the final logic should look like the following: . ",
    "url": "/_pages/igb190-guides/guide-createlegendaryitem.html#example-legendary-blood-drinker",
    
    "relUrl": "/_pages/igb190-guides/guide-createlegendaryitem.html#example-legendary-blood-drinker"
  },"106": {
    "doc": "Creating a Legendary Item",
    "title": "Example Legendary: Mistwalkers",
    "content": "The next example of a legendary item is Mistwalkers, a pair of legendary boots. It will have a custom effect which will reduce the damage you take, but only while moving. Here is the logic required to set it up: . | Add a new Event by pressing the + in the events header. Select the Time &gt; Do every X seconds event, and then enter 0.5 seconds as the duration. | Add a new Condition by pressing the green + in the conditions header. Select the Unit &gt; Unit is moving condition. | Add a new Action by pressing the + in the actions header. Select the Unit &gt; Decrease Stat &gt; Decrease Stat on Unit by Percentage. | In the first block, choose Damage Taken as the stat to change. | In the second block, choose the Item Owner preset for the unit. | In the third block, enter 40 for the percentage. | In the fourth block, enter 1 as the duration. | In the fifth block, enter Mistwalkers as the buff name. | . | . When you are done, the final logic should look like the following: . Implementation Logic . You may find that sometimes logic may seem complex, but a “close” version can be implemented much more easily. In this case, the logic periodically gives the player the buff, and then removes it if they ever move. ",
    "url": "/_pages/igb190-guides/guide-createlegendaryitem.html#example-legendary-mistwalkers",
    
    "relUrl": "/_pages/igb190-guides/guide-createlegendaryitem.html#example-legendary-mistwalkers"
  },"107": {
    "doc": "Creating a Legendary Item",
    "title": "Example Legendary: Revitalising Band",
    "content": "This example will guide you to implementing the Revitalising Band legenadary. It will have a custom effect which will restore source to the player whenever they pick up a health globe. While this is a straightforward effect, it can enable high-resource builds as long as the player is constantly picking up health globes. | Add a new Event by pressing the + in the events header. Select the Player &gt; Player picks up a health globe. | Add a new Action by pressing the + in the actions header. Select the Unit &gt; Add Resource. In the number block, enter 15. | . When you are done, the final logic should look like the following: . ",
    "url": "/_pages/igb190-guides/guide-createlegendaryitem.html#example-legendary-revitalising-band",
    
    "relUrl": "/_pages/igb190-guides/guide-createlegendaryitem.html#example-legendary-revitalising-band"
  },"108": {
    "doc": "Creating a Legendary Item",
    "title": "Example Legendary: Shining Bulwark",
    "content": "The next example of a legendary item is Shining Bulwark, a legendary armor piece. It will have a custom effect which will reduce the damage done by nearby monsters. Here is the logic required to set it up: . | Add a new Event by pressing the + in the events header. Select the Time &gt; Do every X seconds event, and then enter 0.5 seconds as the duration. | Add a new Action by pressing the + in the actions header. Select the Variables &gt; Set Unit Group action. | Set the Variable Name to Targets. | Change the Unit Group to All Enemies Near Unit. Change the Number to 3 and the Unit to the Item Owner preset. We can now refer to this variable in future calculations. | . | Add a new Action by pressing the + in the actions header. Select the Unit &gt; Decrease Stat &gt; Decrease Stat of Unit Group by Percent action. | Change the Stat in the first block to Damage. | Change the Unit Group block to Unit Group Variable, and the variable name to Targets. | Change the Percent block to 40. | Change the Duration to 1 second. | Change the Buff Name to SB (any name will do here). | . | Add a new Action by pressing the + in the actions header. Select the Feedback &gt; Play Feedback on Unit Group action. | Change the first block to Play or Refresh. | Change the effect block to Floor Glow &gt; Yellow Glow. | Change the Unit Group block to Unit Group Variable, and the variable name to Targets. | Change the duration to 1 second. | . | . When you are done, the final logic should look like the following: . ",
    "url": "/_pages/igb190-guides/guide-createlegendaryitem.html#example-legendary-shining-bulwark",
    
    "relUrl": "/_pages/igb190-guides/guide-createlegendaryitem.html#example-legendary-shining-bulwark"
  },"109": {
    "doc": "Creating a Monster",
    "title": "Creating a Monster",
    "content": "In this guide, you will learn how to create and implement custom monsters into your experience. ",
    "url": "/_pages/igb190-guides/guide-createmonster.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createmonster.html"
  },"110": {
    "doc": "Creating a Monster",
    "title": "Contents",
    "content": ". | Monster Overview | Finding a Character Model | Creating the Character | Changing the Monster Stats | . ",
    "url": "/_pages/igb190-guides/guide-createmonster.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createmonster.html"
  },"111": {
    "doc": "Creating a Monster",
    "title": "Monster Overview",
    "content": "… . ",
    "url": "/_pages/igb190-guides/guide-createmonster.html#monster-overview",
    
    "relUrl": "/_pages/igb190-guides/guide-createmonster.html#monster-overview"
  },"112": {
    "doc": "Creating a Monster",
    "title": "Finding a Character Model",
    "content": "In this unit, you will not have the time to model and rig your own character. Instead, you should source a custom character from online. You should consider looking at sources such as the Unity Asset Store or Mixamo (which is where the three current characters were found). Once you have found a character, you will need to then download it and import it into your Unity project. ",
    "url": "/_pages/igb190-guides/guide-createmonster.html#finding-a-character-model",
    
    "relUrl": "/_pages/igb190-guides/guide-createmonster.html#finding-a-character-model"
  },"113": {
    "doc": "Creating a Monster",
    "title": "Creating the Character",
    "content": "Rather than building a monster “from scratch”, it is much faster to instead copy an existing monster. Choose a Monster in the project (Monsters are found under Assets to Use &gt; Monsters) and duplicate it by pressing Control+D. Rename the new monster to your desired name. Double click on the Monster prefab to open it in the prefab editor. Expand the monster so that you can see the existing model, then delete it. Drag in your new model and ensure that it is positioned at X=0, Y=0, Z=0 and has a rotation of X=0, Y=0, Z=0. Select your new monster model. It should have an Animator component on it. Replace the Controller of the Animator component with the Skeleton Override Controller (this can be found at Core &gt; Animator Controllers &gt; Skeleton Overvide Controller). Creating Your Own Animator . If you want your custom monster to have unique animations, you can create a new animator override for it. Right click in your assets folder and select Create &gt; Animation &gt; Animator Override Controller. Then, in the Controller slot, drag in the Player Animator (which is found at Core &gt; Animator Controllers &gt; Player Animator). You can now replace any of the animations used by the player with custom ones specific to your unique monster. ",
    "url": "/_pages/igb190-guides/guide-createmonster.html#creating-the-character",
    
    "relUrl": "/_pages/igb190-guides/guide-createmonster.html#creating-the-character"
  },"114": {
    "doc": "Creating a Monster",
    "title": "Changing the Monster Stats",
    "content": "To change the monster’s stats, select the Monster and go to the Monster component in the inspector. This component manages all of the stats and abilities for the monster. ",
    "url": "/_pages/igb190-guides/guide-createmonster.html#changing-the-monster-stats",
    
    "relUrl": "/_pages/igb190-guides/guide-createmonster.html#changing-the-monster-stats"
  },"115": {
    "doc": "Creating a Custom Character",
    "title": "Creating a Custom Character",
    "content": "This page details how to create a custom character in the experience. This includes downloading and importing a character character model, attaching it to the player, and giving the player new custom abilities. ",
    "url": "/_pages/igb190-guides/guide-createplayer.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createplayer.html"
  },"116": {
    "doc": "Creating a Custom Character",
    "title": "Contents",
    "content": ". | Designing a Custom Character | Finding a Character Model | Creating a Custom Character | Applying a Custom Model to a Player Character | Change Player Attributes | Change Player Resource | Giving the Player Custom Abilities | Adding to the Character Select Screen | . ",
    "url": "/_pages/igb190-guides/guide-createplayer.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createplayer.html"
  },"117": {
    "doc": "Creating a Custom Character",
    "title": "Designing a Custom Character",
    "content": "When designing your custom character, you should first consider the general archetype, theme, and playstyle it will have. This will help you identify a model and/or animations which would be suitable for your needs. Character Archetypes There are a lot of common character archetypes which you may want to consider using as a base for your character. These include: . | Warriors/Barbarians: Melee combat. Physical damage. High defense. | Mage/Sorcerer: Ranged magic combat. Elemental damage. Crowd control. Low health. | Rogue/Assassin: Fast Attacks. High movement. Burst damage. Critical strikes. | Ranger/Archer: High range. Multi-target attacks. Precise positioning and movement. | Paladin/Crusader: Balanced offense, defense, and healing. Focus on buffs and debuffs. | Necromancer: Death magic. Summoned minions. Resource sacrifice. Life drains. | Druid/Shapeshifters: Versatile. Transformations. Varied ability sets. | Monks/Martial Artists: Fists instead of weapons. Fast melee attacks. Energy manipulation. | Engineer/Tinkerer: Gadgets. Traps. Explosives. | Berserker: Massive melee damage, at the cost of health and/or defense. Encouraged to take damage. | Elementalist: Ranged elemental magic with combos. | . There is also currently a shift away from the traditional generic archetypes to make characters feel more distinct and memorable (e.g., people may be more likely to remember your class if you name it a Sound Weaver instead of a Wizard, and then make the abilities all related to sound magic). Darkest Dungeon is a good example of this, using heroes like the Hellion, Grave Robber, Runaway, Leper, and Bounty Hunter (see here for a full list of playable heroes). ",
    "url": "/_pages/igb190-guides/guide-createplayer.html#designing-a-custom-character",
    
    "relUrl": "/_pages/igb190-guides/guide-createplayer.html#designing-a-custom-character"
  },"118": {
    "doc": "Creating a Custom Character",
    "title": "Finding a Character Model",
    "content": "In this unit, you will not have the time to model and rig your own character. Instead, you should source a custom character from online. You should consider looking at sources such as the Unity Asset Store or Mixamo (which is where the three current characters were found). Once you have found a character, you will need to then download it and import it into your Unity project. ",
    "url": "/_pages/igb190-guides/guide-createplayer.html#finding-a-character-model",
    
    "relUrl": "/_pages/igb190-guides/guide-createplayer.html#finding-a-character-model"
  },"119": {
    "doc": "Creating a Custom Character",
    "title": "Creating a Custom Character",
    "content": "To create your custom character, copy and paste one of the existing characters that are currently in the game scene. You may want to choose the one that has attributes which most closely match the character you want to design. ",
    "url": "/_pages/igb190-guides/guide-createplayer.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createplayer.html"
  },"120": {
    "doc": "Creating a Custom Character",
    "title": "Applying a Custom Model to a Player Character",
    "content": "Expand out the custom character, and delete the existing model for the character. Then, drag in your new character model and ensure that its position and rotation are all set to zero. Next, you need to ensure that the model is using the correct animator. Select the custom model and in the animator, drag in the Player Animator into the controller slot (it can be found under Core &gt; Animations &gt; Animator Controllers). The character should now be animated using the animation logic for all of the existing players. ",
    "url": "/_pages/igb190-guides/guide-createplayer.html#applying-a-custom-model-to-a-player-character",
    
    "relUrl": "/_pages/igb190-guides/guide-createplayer.html#applying-a-custom-model-to-a-player-character"
  },"121": {
    "doc": "Creating a Custom Character",
    "title": "Change Player Attributes",
    "content": "To change the player attributes, select your custom player (not the model) and go to the Player component. Give your character a unique Unit Name, and update the attributes to more closely resemble the character’s intended playstyle. ",
    "url": "/_pages/igb190-guides/guide-createplayer.html#change-player-attributes",
    
    "relUrl": "/_pages/igb190-guides/guide-createplayer.html#change-player-attributes"
  },"122": {
    "doc": "Creating a Custom Character",
    "title": "Change Player Resource",
    "content": "Each of the player characters currently use a different thematic resource - the Barbarian uses Range, the Sorcerer uses Mana, and the Ranger uses Energy. Create a new resource for your custom character. In the Player component, scroll down to the ‘Unit Visuals’ section, and change the Resource Name to your desired resource name. When the user is playing with this character, the game will now automatically update all labels to use this specific resource name. You can also create a new custom resource globe for this character. Navigate to Core &gt; Textures &gt; UI &gt; Resource Globes and select one of the existing options. Press Control+D to duplicate it, and give it a new name. Play with the values in the material until you get something that looks nice! . Once you are done, go back to your Player, and in the Resource slot shown above, drag in the material you just made. Your custom character will now use this resource globe visual. ",
    "url": "/_pages/igb190-guides/guide-createplayer.html#change-player-resource",
    
    "relUrl": "/_pages/igb190-guides/guide-createplayer.html#change-player-resource"
  },"123": {
    "doc": "Creating a Custom Character",
    "title": "Giving the Player Custom Abilities",
    "content": "To change the abilities on the player, select the player and go to the Player component. Scroll down to the Abilities array. This array controls which abilities the player will have. You should update this array to use the correct abilities for your custom character. Creating Abilities . If you are unsure how to create abilities, you should read through the Creating an Ability guide. ",
    "url": "/_pages/igb190-guides/guide-createplayer.html#giving-the-player-custom-abilities",
    
    "relUrl": "/_pages/igb190-guides/guide-createplayer.html#giving-the-player-custom-abilities"
  },"124": {
    "doc": "Creating a Custom Character",
    "title": "Adding to the Character Select Screen",
    "content": "To add a custom character to the character select screen, open the CharacterSelect scene, found in the Scenes folder. This Character Select screen has already been set up to accomodate one custom character. Expand the Custom Character Model which can be found in the Characters GameObject in the scene heirarchy. Place your custom character model inside this model, ensuring that it is at a similar position as the original character. Next, select the ‘Nightshade’ GameObject here (which has the visuals for the current character), and disable the Skinned Mesh Renderer component in the inspector. This will hide the model for that character. Your custom character should now be displayed in the correct location on the screen. Adding an Idle Animation Animator . You may want to create a custom animator for your character model here which just plays an idle animation (or drag in the CharacterSelectSorcerer animator which plays a standing idle animation). Next, select the Custom Character Model GameObject in the heirarchy. It will contain a Character Select component. Update the name of the character to match the name of your custom character exactly. Finally, you will need to update the description for your character. In the scene, expand out the CharacterSelectUI GameObject. Go to Custom Character Components &gt; CustomCharacterInfo &gt; Title and enter the name of the character again. Then, go to Custom Character Components &gt; CustomCharacterInfo &gt; BodyText and write the description for your character. Your custom character should now be set up and selectable from the character select screen! . ",
    "url": "/_pages/igb190-guides/guide-createplayer.html#adding-to-the-character-select-screen",
    
    "relUrl": "/_pages/igb190-guides/guide-createplayer.html#adding-to-the-character-select-screen"
  },"125": {
    "doc": "Creating a Quest",
    "title": "Creating a Quest",
    "content": "In this guide, you will learn how to create and implement custom quests into your experience. ",
    "url": "/_pages/igb190-guides/guide-createquest.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createquest.html"
  },"126": {
    "doc": "Creating a Quest",
    "title": "Contents",
    "content": ". | Quest Overview . | Quest Logic | Defining the Quest Logic | . | Quest Examples . | Example Quest #1: Slay the Undead | Example Quest #2: Purchase an Item | Example Quest #3: Armor Up | . | . ",
    "url": "/_pages/igb190-guides/guide-createquest.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createquest.html"
  },"127": {
    "doc": "Creating a Quest",
    "title": "Quest Overview",
    "content": "Creating a quest requires you to specify four pieces of information: . | A quest name, | A quest description, | A list of quest requirements, | (optional) A quest reward. | . This information will be shown to the player in the ‘Active Quests’ window shown on the right of the screen. For each quest requirement, you must specify a requirement name and a number of progress increments. The progress increments keep track of quest progress. For example, if a quest requires you to kill 20 monsters, the requirement will have 20 progress increments, with the progress increments indicating how many monsters you have killed. Similarly, if a quest requires you to cast an ability 5 times, the increments would count how many times you have cast it. If a quest does not have incremental progress (e.g., killing a boss), it should have a single increment. This increment will not be shown to the player. Quest Logic . When the progress increment count matches the requirement (e.g., the quest has 5 progress increments and the player is at the fifth increment), that requirement is now complete. If all quest requirements on a quest are complete, the quest automatically completes. Defining the Quest Logic . A quest is usually defined in three visual scripts: . | Quest Received: Handles the creation of the quest when the necessary events occur. | Quest Updated: Handles updates to quest progress when the necessary events occur. | Quest Completed: Handles any quest reward actions when the quest is completed. | . ",
    "url": "/_pages/igb190-guides/guide-createquest.html#quest-overview",
    
    "relUrl": "/_pages/igb190-guides/guide-createquest.html#quest-overview"
  },"128": {
    "doc": "Creating a Quest",
    "title": "Quest Examples",
    "content": "To help you better understand how to implement quests, the logic for three quests is shown below. Each of these demonstrate different quest features. Example Quest #1: Slay the Undead . The first example quest aims to show you how to handle basic quest setup and progress tracking. When the player first kills a monster, they will be given a quest asking them to kill 15 more monsters. As they kill monsters, quest progress will increment until they have killed all 15, at which point the quest will automatically be completed. To create this quest, follow all of the steps below: . | Open the Visual Scripting Windows (IGB190 &gt; Open Custom Windows). Go to the Gameplay Editor tab. | In the Game Logic header in the top-left corner, create a new script group. Name it ‘Quest - Slay the Undead’. | Rename the ‘Main’ script to ‘Quest Start’ (Right Click &gt; Rename). | Add a new Event (press the red + in the Events header). Select the Unit &gt; Unit is killed event. | Add another new Action to this script, selecting the Quests &gt; Create Quest action. Set the Quest Name to ‘Slay the Undead’. | Add another new Action to this script, selecting the Quests &gt; Add Quest Requirement action. Set the Requirement to ‘Put the Dead to Rest’, the Quest Name to ‘Slay the Undead’, and the Increments to 15. | Add a final Action to this script, selecting the Flow &gt; Disable This Script action. This will ensure that the quest is only ever given to the player once. | Create a new script by pressing the Create New’` button at the top of the window. Name the new script ‘Quest Progress’. | Add a new Event to this script (press the red ‘+’ in the ‘Events’ header). Select the Unit &gt; Unit is killed event. | Add a new Condition (press the green ‘+’ in the ‘Events’ header). Select the Quest &gt; Quest Is Active condition. Set the Quest Name block to ‘Slay the Undead’ (this must match the name you used earlier). | Add an Action to this script, selecting the Quests &gt; Modify Quest Progress action. Set the Quest Name to ‘Slay the Undead’. This will increment the current progress for the quest (in this case, this represents the number of monsters killed). When the current quest progress matches the required quest increments, the quest automatically completes. | . The quest logic should now be fully implemented. The player will be given a quest to kill 15 monsters, and the progress should be automatically tracked as the player kills them. Quest Rewards . As this is a very basic quest, it doesn’t currently have a reward. The remaining two example quests show how this can be done. Example Quest #2: Purchase an Item . The second example quest will prompt the player to purchase an item, and will hopefully encourage them to interact with the shop more throughout the experience. The quest will be given to the player if they pick up gold and have enough to make a purchase (in this case, 2500 gold). Then, the quest will be completed when they next purchase an item. Completing the quest will reward 500 gold. The steps to implement this example quest are as follows: . | Open the Visual Scripting Windows (IGB190 &gt; Open Custom Windows). Go to the Gameplay Editor tab. | In the Game Logic header in the top-left corner, create a new script group. Name it Quest - Purchase Item. | Rename the Main script to Quest Start (Right Click &gt; Rename). | Add a new Event (press the red ‘+’ in the ‘Events’ header). Select the Player &gt; Player picks up gold event. | Add a new Condition (press the green ‘+’ in the Events header). Select the Comparisons &gt; Number Comparison condition. In the first Number slot, select Player &gt; Player Gold. For the comparison, choose Greater Than or Equal To. In the second Number slot, enter 2500. | Add another new Action to this script, selecting the Quests &gt; Create Quest action. Set the Quest Name to Spend Your Riches. | Add another new Action to this script, selecting the Quests &gt; Add Quest Requirement action. Set the Requirement to ‘Purchase an Item’ and the Quest Name to ‘Spend Your Riches’. | Add another new Action to this script, selecting the Quests &gt; Add Quest Reward action. Set the Reward to ‘500 Gold’ and the Quest Name to ‘Spend Your Riches’. (Note: This only adds the reward to the quest label visible to the player, you need to manually provide the rewards yourself). | Finally, add a final Action to this script, selecting the Flow &gt; Disable This Script action. This will ensure that the quest is only ever given to the player once. | Create a new script by pressing the Create New button at the top of the window. Name the new script “Quest Completed”. | Add a new Event to this script (press the red ‘+’ in the ‘Events’ header). Select the Player &gt; Player buys an item event. | Add a new Condition (press the green ‘+’ in the ‘Events’ header). Select the Quest &gt; Quest Is Active condition. Set the Quest Name block to “Spend Your Riches”. | Add an Action to this script, selecting the Quests &gt; Modify Quest Progress action. Set the Quest Name block to “Spend Your Riches”. | Add an Action to this script, selecting the Player &gt; Add Gold action. Set the Number to 500. | Add an Action to this script, selecting the Flow &gt; Disable This Script action. | . Quest Rewards . When you are adding a quest reward to your quest, remember that the ‘Add Quest Reward’ action doesn’t implement any logic. This is just a label that is shown to the player (e.g., it could say something like ‘Unlock Hidden Power’). You need to manually add the completion rewards yourself (in this case, 500 gold is added to the player when the quest completes). Starting Quests on Specific Conditions . This quest shows how you can give the player a quest only after a specific condition is met. In this example, the player isn’t given the quest until they collect gold, and they have at least 2500 gold to spend. This ensures that the player has enough gold to spend at the shop and they aren’t trying to buy an item when they don’t have enough gold. Example Quest #3: Armor Up . The third example quest will prompt the player to equip an item in every slot. This aims to remind players that they need to equip items. This quest has six ‘progress increments’ as the player can equip six items at a time. Whenever the player equips or unequips an item, the quest progress will update to match the current number of items the player has equipped. If the player has items equipped in all six slots, the quest will complete and the player will be given the gold reward. The steps to implement this example quest are as follows: . | Open the Visual Scripting Windows (IGB190 &gt; Open Custom Windows). Go to the Gameplay Editor tab. | In the Game Logic header in the top-left corner, create a new script group. Name it ‘Quest - Armor Up’ . | Rename the Main script to ‘Quest Start’ (Right Click &gt; Rename). | Add a new Event (press the red ‘+’ in the Events header). Select the Player &gt; Player equips an item event. | Add another new Action to this script, selecting the Quests &gt; Create Quest action. Set the Quest Name to ‘Armor Up’. | Add another new Action to this script, selecting the Quests &gt; Add Quest Requirement action. Set the Requirement to ‘Equip Items in All Slots’, the Quest Name to ‘Armor Up’, and the Increments to 6. | Add another new Action to this script, selecting the Quests &gt; Add Quest Reward action. Set the Reward to 1000 Gold and the Quest Name to ‘Armor Up’. | Finally, add a final Action to this script, selecting the Flow &gt; Disable This Script action. This will ensure that the quest is only ever given to the player once. | Create a new script by pressing the Create New button at the top of the window. Name the new script “Quest Progress”. | Add a new Event to this script (press the red ‘+’ in the Events header). Select the Player &gt; Player equips an item event. | Add a new Event to this script (press the red ‘+’ in the Events header). Select the Player &gt; Player unequips an item event. This will ensure the script runs whenever an item is equipped or unequipped (i.e., the player equipment changes in any way). | Add a new Condition (press the green ‘+’ in the Events header). Select the Quest &gt; Quest Is Active condition. Set the Quest Name block to “Armor Up”. | Add an Action to this script, selecting the Quests &gt; Set Quest Progress action. Set the Quest Name to “Armor Up”. Set the Number to Players &gt; Items Equipped. This will update the quest progress to match the number of items equipped (e.g., if the player has three items equipped it will show as 3/6 items equipped). | Create a new script by pressing the ‘Create New’ button at the top of the window. Name the new script “Quest Completed”. | Add a new Event to this script (press the red ‘+’ in the Events header). Select the Quests &gt; On quest completed event. Set the Quest Name to ‘Armor Up’. | Add an Action to this script, selecting the Player &gt; Add Gold action. Set the Number to 1000. | . Quest Increments . This quest shows an example of a quest with a set number of increments (in this case, 6 increments) that don’t just count up one at a time. Instead, the current number of progress increments is driven by some game data - specifically the number of items the player currently has equipped. ",
    "url": "/_pages/igb190-guides/guide-createquest.html#quest-examples",
    
    "relUrl": "/_pages/igb190-guides/guide-createquest.html#quest-examples"
  },"129": {
    "doc": "Creating a Level",
    "title": "Creating a Level",
    "content": "In this guide, you will learn how to implement a custom level. Your level should be designed so that it has sufficient variety and length to show off the mechanics and overall design of your experience (particularly the abilities, items, and overall character synergies). It is important that your level isn’t too long, as this may cause players to become disengaged. Overall, you should be looking to build an experience that lasts ~10 minutes in length, and effectively meets the design pillars for the experience. ",
    "url": "/_pages/igb190-guides/guide-createtile.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createtile.html"
  },"130": {
    "doc": "Creating a Level",
    "title": "Contents",
    "content": ". | Using the Default Tiles | Setting up Snapping | Placing Tiles | Rebuilding Navigation | . ",
    "url": "/_pages/igb190-guides/guide-createtile.html",
    
    "relUrl": "/_pages/igb190-guides/guide-createtile.html"
  },"131": {
    "doc": "Creating a Level",
    "title": "Using the Default Tiles",
    "content": "The project includes a variety of level tiles. These tiles can be snapped together to build an environment very quickly. This approach is broadly known as Modular Level Design. When done with larger areas, these are often referred to as Tiles and the collection of available tiles is known as the Tileset. Modular Level Design . Modular design is the practice of building game environments from reusable pieces, like rooms, corridors, floors, and props, that fit together seamlessly. This approach saves time, keeps the visual style consistent, and allows designers to quickly create varied layouts by reusing the same parts. It also works well with procedural systems, making it possible to generate large or unpredictable levels without needing to handcraft every detail. You can find the tiles in the project by going to Assets to Use &gt; Tilemap &gt; Rooms. Each room is built using a small collection of pieces: . | Floors: Each floor tile is 5m x 5m. To add some variety, the project has three possible floor tiles. | Walls: Each wall is 5m wide and should align with the floor tiles perfectly. | Pillars: The pillars are used to hide visual issues when two walls connect, or provide some basic set dressing to larger spaces. | Ramps: Ramps are used to provide some verticality to the environment. Each ramp changes the elevation by 2m. | . ",
    "url": "/_pages/igb190-guides/guide-createtile.html#using-the-default-tiles",
    
    "relUrl": "/_pages/igb190-guides/guide-createtile.html#using-the-default-tiles"
  },"132": {
    "doc": "Creating a Level",
    "title": "Setting up Snapping",
    "content": "As all of the environmental pieces have very specific sizes, Unity’s snapping tool can be used to ensure that all environmental pieces align exactly. At the top of the Scene window, there is a dropdown which controls the rotation mode. It can either be set to Local or Global. Ensure that this is set to Global. At the top of the scene view again, ensure that the magnet toggle is enabled. Then press the dropdown, and change the snapping size to X=2.5, Y=2, Z=2.5. Why these numbers? . These numbers were chosen because they’re good values for this project. The ground tiles are all exactly 5x5m, so this means that you will always drag objects in increments of half a tile. Moving in half increments allows for finer control - such as if you want to place a pillar in the center of a tile. Moving in Y increments of 2 ensures that if you move a tile down, it will always be aligned perfectly with how much a ramp would lower the player. ",
    "url": "/_pages/igb190-guides/guide-createtile.html#setting-up-snapping",
    
    "relUrl": "/_pages/igb190-guides/guide-createtile.html#setting-up-snapping"
  },"133": {
    "doc": "Creating a Level",
    "title": "Placing Tiles",
    "content": "Once you have snapping set up, drag any of the default tiles into the scene. You should then be able to drag them around, and they should connect perfectly with the existing tiles. This allows you to quickly build distinct modular levels. Making Minor Adjustments to Specific Tiles . After you place all of the tiles, you may need to make some small adjustments. For example, you may need to add or remove walls such that tiles connect ‘nicely’. This is completely normal - making changes to specific tiles will not override the tiles. ",
    "url": "/_pages/igb190-guides/guide-createtile.html#placing-tiles",
    
    "relUrl": "/_pages/igb190-guides/guide-createtile.html#placing-tiles"
  },"134": {
    "doc": "Creating a Level",
    "title": "Rebuilding Navigation",
    "content": "After you have added new tiles, you will need to rebake your navigation. In the scene heirarchy, select the Navigation GameObject, go to the NavMesh Surface component and press the Bake button. You should now have a working environment! . ",
    "url": "/_pages/igb190-guides/guide-createtile.html#rebuilding-navigation",
    
    "relUrl": "/_pages/igb190-guides/guide-createtile.html#rebuilding-navigation"
  },"135": {
    "doc": "Optimising the Game",
    "title": "Optimising the Game",
    "content": "In this guide, you will learn how to optimise the performance of the game, improving the frame rate of the experience for users. ",
    "url": "/_pages/general-guides/guide-optimising.html",
    
    "relUrl": "/_pages/general-guides/guide-optimising.html"
  },"136": {
    "doc": "Optimising the Game",
    "title": "Contents",
    "content": ". | Optimising the Game | . ",
    "url": "/_pages/general-guides/guide-optimising.html",
    
    "relUrl": "/_pages/general-guides/guide-optimising.html"
  },"137": {
    "doc": "Set Dressing an Environment",
    "title": "Set Dressing an Environment",
    "content": "In this guide, you will learn how to set dress an environment to make the space feel more natural and unique. This is especially beneficial when the space has been created using a small set of generic tiles. ",
    "url": "/_pages/general-guides/guide-setdressing.html",
    
    "relUrl": "/_pages/general-guides/guide-setdressing.html"
  },"138": {
    "doc": "Set Dressing an Environment",
    "title": "Contents",
    "content": ". | Set Dressing an Environment | . ",
    "url": "/_pages/general-guides/guide-setdressing.html",
    
    "relUrl": "/_pages/general-guides/guide-setdressing.html"
  },"139": {
    "doc": "Theming",
    "title": "Set Dressing an Environment",
    "content": "In this guide, you will learn how to set dress an environment to make the space feel more natural and unique. This is especially beneficial when the space has been created using a small set of generic tiles. ",
    "url": "/_pages/general-guides/guide-theming.html#set-dressing-an-environment",
    
    "relUrl": "/_pages/general-guides/guide-theming.html#set-dressing-an-environment"
  },"140": {
    "doc": "Theming",
    "title": "Contents",
    "content": ". | Set Dressing an Environment | . ",
    "url": "/_pages/general-guides/guide-theming.html",
    
    "relUrl": "/_pages/general-guides/guide-theming.html"
  },"141": {
    "doc": "Theming",
    "title": "Theming",
    "content": " ",
    "url": "/_pages/general-guides/guide-theming.html",
    
    "relUrl": "/_pages/general-guides/guide-theming.html"
  },"142": {
    "doc": "IGB190 Guides",
    "title": "IGB190 Guides",
    "content": "To help you develop your project, this section offers several guides which may help you develop specific aspects of your experience. Please note, however, that the weekly worksheets go into additional detail and using these guides should not replace your completion of those activities. Browse some of the guides found below. ",
    "url": "/_pages/igb190-guides/igb190-guides.html",
    
    "relUrl": "/_pages/igb190-guides/igb190-guides.html"
  },"143": {
    "doc": "Home",
    "title": "IGB190 Documentation",
    "content": "This website is intended to provide some helpful guides and resources for the unit IGB190: Game Mechanics Implementation. In this unit, you will be using the provided tools and packages to build a 10-minute action role-playing game (ARPG). The experience will have a custom player-character, a variety of custom abilities, a selection of item sets with custom abilities, enemies, tilemaps, quests and more. To help you do this, you will be contributing to a partially-completed project which has many of the core systems already set up. This website aims to help you better understand these systems, and how you can use them to build your intended experience. Areas you may wish to explore include: . | Guides: Contains a variety of helpful guides aimed at teaching the basics of various topics. | Visual Coding: An overview of the visual coding system available in the experience for creating abilities, items, quests, and general game logic (such as tutorials and bespoke events). | Resources: Contains helpful resources that will help you develop your project. | Reference Materials: Reference materials intended to help you get started in building your experience. This provides some game databases, videos, and other content which may help you if you are not familiar with ARPGs. | Code Documentation: Documentation for the Base Experience that you are developing. This provides an overview of the main scripts (note: you are not expected to understand or interact with these, but this documentation is here if you would like to do so). | . Contributing to the Documentation . If you would like to contribute to this documentation website, you are welcome to do so. Instructions for how to do this can be found here. ",
    "url": "/#igb190-documentation",
    
    "relUrl": "/#igb190-documentation"
  },"144": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"145": {
    "doc": "Item Editor",
    "title": "Item Editor",
    "content": "The item editor window is used to create items visually, without the need for code. It allows you to choose basic properties for the item, such as its name, icon, item slot and tooltip. This window also allows you to choose specific stats that the item can have, as well the the stat ranges for each stat. ",
    "url": "/_pages/visual-coding/item-editor.html",
    
    "relUrl": "/_pages/visual-coding/item-editor.html"
  },"146": {
    "doc": "Item Editor",
    "title": "Contents",
    "content": ". ",
    "url": "/_pages/visual-coding/item-editor.html",
    
    "relUrl": "/_pages/visual-coding/item-editor.html"
  },"147": {
    "doc": "Item Nodes",
    "title": "Item Nodes",
    "content": "Below is a summary of all the visual scripting nodes which return an item in the visual scripting system. You can use any of these (or a combination of these) when specifying an item. ",
    "url": "/_pages/visual-coding/item-nodes.html",
    
    "relUrl": "/_pages/visual-coding/item-nodes.html"
  },"148": {
    "doc": "Item Nodes",
    "title": "Contents",
    "content": ". | Specify a Specific Item | Item Nodes | . Specify a Specific Item . If the visual scripting node allows it, you will be able to specify a specific item for the node, rather than using one of the methods below. Item Nodes . Item . Random item of rarity . Returns a random item with the specified rarity. ",
    "url": "/_pages/visual-coding/item-nodes.html",
    
    "relUrl": "/_pages/visual-coding/item-nodes.html"
  },"149": {
    "doc": "Importing a Mixamo Model",
    "title": "Importing a Mixamo Model",
    "content": " ",
    "url": "/_pages/general-guides/mixamo.html",
    
    "relUrl": "/_pages/general-guides/mixamo.html"
  },"150": {
    "doc": "Importing a Mixamo Model",
    "title": "Contents",
    "content": ". | Importing a Mixamo Model . | Download the Model | Import the Mixamo Model | Importing Mixamo Animations | Features | . | . ",
    "url": "/_pages/general-guides/mixamo.html",
    
    "relUrl": "/_pages/general-guides/mixamo.html"
  },"151": {
    "doc": "Importing a Mixamo Model",
    "title": "Download the Model",
    "content": ". | Go to Mixamo. | Log in, or create a new account if you do not already have one. | Select or upload your character model. | Customize the animation if needed by selecting from the animations available. | Click the Download button. | Choose the following options for Unity: . | Format: FBX for Unity. | Pose: T-Pose. | Animation: If you want to include the animation, make sure it’s selected. | Skin: With Skin. | . | Click the Download button in the popup. | . ",
    "url": "/_pages/general-guides/mixamo.html#download-the-model",
    
    "relUrl": "/_pages/general-guides/mixamo.html#download-the-model"
  },"152": {
    "doc": "Importing a Mixamo Model",
    "title": "Import the Mixamo Model",
    "content": ". | Open your Unity project. | In the Project window, navigate to the folder you want to import the model into. | Drag the downloaded FBX file into the Unity folder, or right-click and select Import New Asset to locate and import the file manually. | Once imported, select the model in the Project window. | In the Inspector, go to the Model tab and ensure the Animation Type is set to Humanoid (for human-like characters) or Generic (for other types of models). | Under the Material section, if you’re using the legacy shader, check Import Materials and Use Legacy Materials to ensure proper texture mapping. This will help the model use the correct materials that were imported with the FBX. | Click Apply. | . ",
    "url": "/_pages/general-guides/mixamo.html#import-the-mixamo-model",
    
    "relUrl": "/_pages/general-guides/mixamo.html#import-the-mixamo-model"
  },"153": {
    "doc": "Importing a Mixamo Model",
    "title": "Importing Mixamo Animations",
    "content": ". | Go to Mixamo.com. | Log in, or create a new account if you do not already have one. | . Mixamo models use different avatars for defining animations. This means that an animation shown on one character may not look correct if it is applied to a different character. If you encounter this problem, you should use a T-Pose for the avatar instead. dfgdfgdfg . ",
    "url": "/_pages/general-guides/mixamo.html#importing-mixamo-animations",
    
    "relUrl": "/_pages/general-guides/mixamo.html#importing-mixamo-animations"
  },"154": {
    "doc": "Importing a Mixamo Model",
    "title": "Features",
    "content": ". | Clean layout | Responsive design | Easy to use | . Default label . Blue label . Stable . New release . Coming soon . Deprecated . ",
    "url": "/_pages/general-guides/mixamo.html#features",
    
    "relUrl": "/_pages/general-guides/mixamo.html#features"
  },"155": {
    "doc": "Number Nodes",
    "title": "Number Nodes",
    "content": "Below is a summary of all the visual scripting nodes which return a number in the visual scripting system. ",
    "url": "/_pages/visual-coding/number-nodes.html",
    
    "relUrl": "/_pages/visual-coding/number-nodes.html"
  },"156": {
    "doc": "Number Nodes",
    "title": "Contents",
    "content": ". | Specify a Specific Number | Number Nodes (Player) | Number (Time) | Number (Math) | Number Nodes (Random) | Number Nodes (Unit) | Number (Unit Group) | Number (Variables) | . Specify a Specific Number . If the visual scripting node allows it, you will be able to specify a specific number for the node, rather than using one of the methods below (e.g., dealing an exact amount of damage). Number Nodes (Player) . Number &gt; Player . Player level . Returns the current player level. Number &gt; Player . Player gold . Returns the amount of gold the player currently has. Number &gt; Player . Player items equipped . Returns the number of items the player currently has equipped. Number (Time) . Number &gt; Time . Time since level start Returns the amount of time in seconds since the level started. Number &gt; Time . Delta time Returns the amount of time spent rendering the frame. Number &gt; Time . Fixed delta time Returns the amount of time between physicis timesteps. Number (Math) . Number &gt; Math . Addition . Returns the result of two numbers being added together. Number &gt; Math . Subtraction . Returns the result of one number being subtracted from another. Number &gt; Math . Multiplication . Returns the result of two numbers being multiplied together. Number &gt; Math . Division . Returns the result of one number being divided by another. Number &gt; Math . Distance between points . Returns the distance between two points. Number &gt; Math . Distance between units . Returns the distance between two units. Number &gt; Math . Vector component . Returns a specific component from a vector (e.g., the X, Y, or Z component). Number Nodes (Random) . Number &gt; Random . Random number . Returns a random number between two values. Number Nodes (Unit) . Number &gt; Unit . Unit health . Returns the current health of the specified unit. Number &gt; Unit . Unit max health . Returns the maximum health of the specified unit. Number &gt; Unit . Unit health percent . Returns the current health percent of the unit (e.g., 40 = 40% health). Number &gt; Unit . Unit resource . Returns the current resource of the specified unit. Number &gt; Unit . Unit max resource . Returns the maximum resource of the specified unit. Number &gt; Unit . Unit resource percent . Returns the current resource percent of the unit (e.g., 40 = 40% resource). Number (Unit Group) . Number &gt; Unit Group . Count units in unit group . Returns the number of units in the specified unit group. Number (Variables) . Unit &gt; Variable . Number variable . Returns the number stored in the variable with the given name. This variable is shared between all scripts in the same “block” (e.g., ability/item). Unit &gt; Variable . Global number variable . Returns the number stored in the global variable with the given name. This variable is shared across the entire application. ",
    "url": "/_pages/visual-coding/number-nodes.html",
    
    "relUrl": "/_pages/visual-coding/number-nodes.html"
  },"157": {
    "doc": "Other Nodes",
    "title": "Other Nodes",
    "content": "Below is a summary of all the visual scripting nodes which return an option from a dropdown in the visual scripting system. No function nodes are available for these. ",
    "url": "/_pages/visual-coding/other-nodes.html",
    
    "relUrl": "/_pages/visual-coding/other-nodes.html"
  },"158": {
    "doc": "Other Nodes",
    "title": "Contents",
    "content": ". | Projectile Nodes | Visual Effect Nodes | Stat Nodes | . ",
    "url": "/_pages/visual-coding/other-nodes.html",
    
    "relUrl": "/_pages/visual-coding/other-nodes.html"
  },"159": {
    "doc": "Other Nodes",
    "title": "Projectile Nodes",
    "content": "When specifying a projectile, a projectile node will let you choose from all of the valid projectiles which exist in your project. ",
    "url": "/_pages/visual-coding/other-nodes.html#projectile-nodes",
    
    "relUrl": "/_pages/visual-coding/other-nodes.html#projectile-nodes"
  },"160": {
    "doc": "Other Nodes",
    "title": "Visual Effect Nodes",
    "content": "When specifying a visual effect, a visual effect node will let you choose from all valid visual effects which exist in your project. ",
    "url": "/_pages/visual-coding/other-nodes.html#visual-effect-nodes",
    
    "relUrl": "/_pages/visual-coding/other-nodes.html#visual-effect-nodes"
  },"161": {
    "doc": "Other Nodes",
    "title": "Stat Nodes",
    "content": "When specifying a unit stat (e.g., movement speed), the stat node will let you choose from a list of all valid stats in the project. By default, the following options are allowed: . ",
    "url": "/_pages/visual-coding/other-nodes.html#stat-nodes",
    
    "relUrl": "/_pages/visual-coding/other-nodes.html#stat-nodes"
  },"162": {
    "doc": "Projectiles",
    "title": "Projectiles",
    "content": "All ranged abilities which shoot a GameObject into the level are handled through the Projectile system. Only GameObjects that you have specifically set up in your project with a Projectile component will be available to spawn through the visual scripting system. ",
    "url": "/_pages/systems/projectiles.html",
    
    "relUrl": "/_pages/systems/projectiles.html"
  },"163": {
    "doc": "Projectiles",
    "title": "Contents",
    "content": ". | Creating a Projectile | Projectile Properties | Visual Scripting Example | . ",
    "url": "/_pages/systems/projectiles.html",
    
    "relUrl": "/_pages/systems/projectiles.html"
  },"164": {
    "doc": "Projectiles",
    "title": "Creating a Projectile",
    "content": "To create a projectile, create a GameObject (or take an existing GameObject, such as a particle effect) and give it a collider. Ensure that the Is Trigger property is set to True. Then, add a Projectile component to it. In the Category property, enter the category this projectile should have (e.g., “Fireball”). This will make it easier to find specific types of projectiles when selecting one in the visual editor. If the projectile is actually just a template, and shouldn’t appear as a spawnable projectile, set the Is Template property to True, otherwise leave this as False. ",
    "url": "/_pages/systems/projectiles.html#creating-a-projectile",
    
    "relUrl": "/_pages/systems/projectiles.html#creating-a-projectile"
  },"165": {
    "doc": "Projectiles",
    "title": "Projectile Properties",
    "content": "You can define the exact properties of a projectile when it is spawned. To first spawn a projectile, use the Spawn Projectile action in the visual coding system: . | Spawning the Projectile: This spawns the specified projectile at the specified location in the environment. | . Then, use any of the below actions to handle the behaviour of the projectile: . | Move Projectile Forwards: Use this to fire the projectile forwards at a given speed. | Set Lifetime: Sets the time before the projectile destroys itself. Set this if you don’t want the projectile to travel indefinitely (e.g,, if you don’t want enemies far off-screen to be hit). | Rotate Projectile: Use this to adjust the rotation of a spawned projectile. Do this after you spawn the projectile (e.g., if you want to have it face a random direction, or spawn multiple projectiles that all have slightly different rotations). | Face Projectile Towards Point: Use this if you want to fire the projectile towards a specific point. | . Finally, use the Destroy Projectile action to destroy the projectile. | Destroy Projectile: Destroys the specified projectile. Use this if you want to destroy a projectile on a specific condition (e.g., after it hits a target). | . ",
    "url": "/_pages/systems/projectiles.html#projectile-properties",
    
    "relUrl": "/_pages/systems/projectiles.html#projectile-properties"
  },"166": {
    "doc": "Projectiles",
    "title": "Visual Scripting Example",
    "content": "Implementing the logic for a projectile is usually done in two scripts. The first script handles the spawning and initial behaviour of the projectile, while the second script handles the collision logic. Below is the logic for the Shoot ability. Spawning the Projectile: This script spawns the projectile when the ability is first cast, then faces it towards the target and moves it forward at 30 metres per second. Checking for Collisions: This checks for collisions with the projectile, and if one is found, it deals damage to the target and destroys the projectile. Projectile Collisions . It is not required that the projectile be destroyed when a collision occurs. If the projectile isn’t destroyed, it would instead pierce through enemies. Projectiles can also do actions other then damage when a hit is made. ",
    "url": "/_pages/systems/projectiles.html#visual-scripting-example",
    
    "relUrl": "/_pages/systems/projectiles.html#visual-scripting-example"
  },"167": {
    "doc": "Quest Documentation",
    "title": "The Quest Class",
    "content": "The quest class is used to create and control quests. The Quest class does not inherit from MonoBehaviour, so quests are not components which can be added to your scenes. Instead, you should use the methods described below to control quests (or use the visual scripting system). You are not required to write any code in this unit. It is recommended that you instead use the provided visual scripting system in this unit. If you want to implement logic that cannot easily be handled by that system though, this documentation should help you better understand the code and classes in the project. ",
    "url": "/_pages/documentation/quest.html#the-quest-class",
    
    "relUrl": "/_pages/documentation/quest.html#the-quest-class"
  },"168": {
    "doc": "Quest Documentation",
    "title": "Contents",
    "content": ". | Creating a Quest | Activating a Quest | Deactivating a Quest | Updating Quest Progress | Checking Quest States | Completing a Quest | . ",
    "url": "/_pages/documentation/quest.html",
    
    "relUrl": "/_pages/documentation/quest.html"
  },"169": {
    "doc": "Quest Documentation",
    "title": "Creating a Quest",
    "content": "// Create the quest with a basic label. Quest quest = new Quest(\"Skill Training\"); // Add a requirement to the quest. quest.AddCompletionRequirement(\"Use the Cleave Ability\"); // Alternatively, if you want it to have multiple progress increments, specify that number here. quest.AddCompletionRequirement(\"Use the Cleave Ability\", 5); // Specify the reward for the quest. This is just a label, you must code the specific reward logic // when the quest is completed. quest.SetReward(\"Legendary Item\"); . ",
    "url": "/_pages/documentation/quest.html#creating-a-quest",
    
    "relUrl": "/_pages/documentation/quest.html#creating-a-quest"
  },"170": {
    "doc": "Quest Documentation",
    "title": "Activating a Quest",
    "content": "Even if you create a quest object, it is not ‘active’ until it is has been added to the quest system. This means that you can create all of the quests at the start of the level, and then only give them to the player when appropriate conditions are met. To add a quest to the quest system, use the following code: . GameManager.quests.AddQuest(quest); . ",
    "url": "/_pages/documentation/quest.html#activating-a-quest",
    
    "relUrl": "/_pages/documentation/quest.html#activating-a-quest"
  },"171": {
    "doc": "Quest Documentation",
    "title": "Deactivating a Quest",
    "content": "If you want to remove a quest that has already been assigned to the player, you can use a similar command: . GameManager.quests.RemoveQuest(quest); . ",
    "url": "/_pages/documentation/quest.html#deactivating-a-quest",
    
    "relUrl": "/_pages/documentation/quest.html#deactivating-a-quest"
  },"172": {
    "doc": "Quest Documentation",
    "title": "Updating Quest Progress",
    "content": "// Increments the quest requirement by a single increment. This can only be used // if the quest contains a single increment (otherwise it doesn't know which to // increment). quest.IncrementProgress(); // Increments the quest requirement by the given number of progress increments. quest.IncrementProgress(5); // Sets the quest progress to a specific value. This is helpful when the requirement // isn't going up and down in a steady way. E.g., if the quest completes when the player // gets 500 gold, this should dynamically update to a specific value whenever the player // gains or loses gold. quest.SetProgress((int)GameManager.player.currentGold); // Decrements the quest requirement by a single value. quest.DecrementProgress(); // If the quest has multiple completion requirements, you need to specify the label for // the requirement when incrementing it. quest.IncrementProgress(\"SpecificRequirement\", 2); . ",
    "url": "/_pages/documentation/quest.html#updating-quest-progress",
    
    "relUrl": "/_pages/documentation/quest.html#updating-quest-progress"
  },"173": {
    "doc": "Quest Documentation",
    "title": "Checking Quest States",
    "content": "You can request information about the current quests with the following methods: . // Check to see if a quest is currently active. bool questIsActive = GameManager.quests.QuestIsActive(quest); // Alternatively, you can use the quest name instead. bool questIsActive = GameManager.quests.QuestIsActive(\"QuestName\"); // Check to see if a quest has been completed. bool questIsCompleted = GameManager.quests.QuestIsCompleted(quest); // Alternatively, use the quest name instead. bool questIsCompleted = GameManager.quests.QuestIsCompleted(\"QuestName\"); . ",
    "url": "/_pages/documentation/quest.html#checking-quest-states",
    
    "relUrl": "/_pages/documentation/quest.html#checking-quest-states"
  },"174": {
    "doc": "Quest Documentation",
    "title": "Completing a Quest",
    "content": "A quest will automatically be completed when all of the requirements have been met. If you are wanting to perform actions when the quest completes (e.g., providing the quest reward), you should use the provided events to execute the quest completion logic. ",
    "url": "/_pages/documentation/quest.html#completing-a-quest",
    
    "relUrl": "/_pages/documentation/quest.html#completing-a-quest"
  },"175": {
    "doc": "Quest Documentation",
    "title": "Quest Documentation",
    "content": " ",
    "url": "/_pages/documentation/quest.html",
    
    "relUrl": "/_pages/documentation/quest.html"
  },"176": {
    "doc": "Reference Materials",
    "title": "Game Development Resources",
    "content": "This page contains a collection of resources that will help you develop your games. | Free ARPGs | Item Databases | Ability Databases | . ",
    "url": "/_pages/reference-materials/reference-materials.html#game-development-resources",
    
    "relUrl": "/_pages/reference-materials/reference-materials.html#game-development-resources"
  },"177": {
    "doc": "Reference Materials",
    "title": "Free ARPGs",
    "content": ". | Path of Exile: A highly popular and complex ARPG known for its deep skill tree and complex loot system. It’s free-to-play and often used as a reference for modern ARPG design. | Torchlight Infinite: Torchlight has a more casual, fun style than other ARPGs but still includes a lot of key elements like loot and character progression. | Lost Ark: A newer free-to-play ARPG with both a rich narrative and combat similar to the Diablo series. Its diverse character classes and dungeons can help students explore progression systems, combat design, and multiplayer interactions. | Diablo III (Starter Edition) – While Diablo III is typically a paid game, Blizzard offers a free Starter Edition that lets players experience the game up to level 13. It’s a great introduction to ARPGs, featuring a mix of combat, loot, and abilities. | . ",
    "url": "/_pages/reference-materials/reference-materials.html#free-arpgs",
    
    "relUrl": "/_pages/reference-materials/reference-materials.html#free-arpgs"
  },"178": {
    "doc": "Reference Materials",
    "title": "Item Databases",
    "content": "If you are looking for inspiration for item effects, you should consider looking through the unique/legendary items used in popular games within the genre. Remember that interesting synergies usually come from the combination of multiple effects. | Diablo 3 Item Database | Diablo 4 Item Database | Lost Ark Item Database | Last Epoch Item Database | Path of Exile Item Database | Path of Exile 2 Item Database | . ",
    "url": "/_pages/reference-materials/reference-materials.html#item-databases",
    
    "relUrl": "/_pages/reference-materials/reference-materials.html#item-databases"
  },"179": {
    "doc": "Reference Materials",
    "title": "Ability Databases",
    "content": "If you are looking for inspiration for abilities, you should consider looking through abilities found in common ARPGs. Remember though that more complex doesn’t mean that the ability will be better! . | Diablo 3 Ability Database | Diablo 4 Ability Database | Last Epoh Ability Database | Path of Exile Skill Database | Path of Exile 2 Skill Database | . ",
    "url": "/_pages/reference-materials/reference-materials.html#ability-databases",
    
    "relUrl": "/_pages/reference-materials/reference-materials.html#ability-databases"
  },"180": {
    "doc": "Reference Materials",
    "title": "Reference Materials",
    "content": " ",
    "url": "/_pages/reference-materials/reference-materials.html",
    
    "relUrl": "/_pages/reference-materials/reference-materials.html"
  },"181": {
    "doc": "Regions",
    "title": "Regions",
    "content": "Regions are used as a simple way of handling logic in which things happen when the player enters, leaves, or stays in an area. ",
    "url": "/_pages/systems/regions.html",
    
    "relUrl": "/_pages/systems/regions.html"
  },"182": {
    "doc": "Regions",
    "title": "Contents",
    "content": ". | Creating a Region | Purpose of Regions | . ",
    "url": "/_pages/systems/regions.html",
    
    "relUrl": "/_pages/systems/regions.html"
  },"183": {
    "doc": "Regions",
    "title": "Creating a Region",
    "content": "To create a region, create a GameObject, such as a cube, and give it a collider. Ensure that the Is Trigger property is set to True. Then, add a Region component. Enter an appropriate name for the Region Name property, so that you can refer to it later. ",
    "url": "/_pages/systems/regions.html#creating-a-region",
    
    "relUrl": "/_pages/systems/regions.html#creating-a-region"
  },"184": {
    "doc": "Regions",
    "title": "Purpose of Regions",
    "content": "The application also provides simple functionality for removing regions, allowing you to designate areas of the game which can be removed when needed. Some common example use-cases for regions include: . | Checking when the player enters an area. For example, you may want to only trigger some actions (such as dialogue) when a player enters a room. | Checking when the player is in an area. For example, you may want to constantly damage the player while they are standing in fire. | Creating blockers. For example, you may have an invisible blocker region that prevents the player from going through a door until after the player collects a key. | . Do I need to use regions? . Regions are not required. They provide some simple functionality which is useful when using the visual coding system. If you are writing your own code, you can use regular Unity methods, such as OnTriggerEnter and OnTriggerExit instead. ",
    "url": "/_pages/systems/regions.html#purpose-of-regions",
    
    "relUrl": "/_pages/systems/regions.html#purpose-of-regions"
  },"185": {
    "doc": "Resources",
    "title": "Game Development Resources",
    "content": "This page contains a collection of resources that will help you develop your games. | Game Design | Game Programming Resources | UI | Fonts | Music | Sound Effects | Textures | Animations | 3D Models | 3D Humanoid Characters | Terrain Tools | Useful Unity Tools | . ",
    "url": "/resources/#game-development-resources",
    
    "relUrl": "/resources/#game-development-resources"
  },"186": {
    "doc": "Resources",
    "title": "Game Design",
    "content": "Game Design Lenses: A collection of 101 lenses or perspectives that help you analyze and improve your game design decisions. These lenses focus on aspects like gameplay balance, player experience, and system design. Great for refining your ideas and spotting potential issues. The MDA Framework: A well-known framework for understanding how different game design elements interact. It helps you think about the relationship between game mechanics, player behavior (dynamics), and the emotional responses you want to evoke (aesthetics). The Golden Rule of Game Design: This article breaks down the “Golden Rule” of game design: designing with the player’s experience in mind. It provides advice on how to ensure that your game is intuitive, engaging, and enjoyable by prioritizing player feedback and emotions. The Game Maker’s Toolkit YouTube Channel: A YouTube channel by Mark Brown, who explores specific game design elements in detail, like level design, systems, and player psychology. His videos break down examples from real games and provide valuable insights into how game mechanics and narrative are intertwined. The 5 Types of Fun: In this video, Marc LeBlanc discusses the five types of fun: Sensation, Fantasy, Narrative, Challenge, and Fellowship. Understanding these types helps you design games that cater to different player preferences and build deeper, more engaging experiences. The Designer’s Notebook: A collection of articles by seasoned game designers, each offering insights on different elements of game design, from narrative to mechanics to systems design. Each article tackles a specific aspect of creating games and offers actionable advice. Game Accessibility Guidelines: Every game designer should bookmark these guidelines. They go through the principles you should follow and give examples for each task. There’s even a checklist you can download. GDC Vault: The Game Developers Conference adds all the various talks and presentations from their events to their vault. These range from technical advice on how to develop specific ideas to wider trends and best practices. Design Doc This channel answers the tricky, specific questions you might have about game design, focusing on the mechanics themselves. How do you stop people from hoarding items? Why add critical hits? What’s the point of fast travel? . Brackeys: A huge channel of tutorials that also delves into the actual game design decisions behind that development. The only downside is that they shut down a few years ago, so some videos can be a little outdated. ",
    "url": "/resources/#game-design",
    
    "relUrl": "/resources/#game-design"
  },"187": {
    "doc": "Resources",
    "title": "Game Programming Resources",
    "content": "Game Programming Patterns: Keeping your code clean and organised is a major challenge, so this free ebook teaches you the best practices. Programming Patterns on Unity: Unity has released a similar guide around coding patterns and explaining how to use them inside Unity. freeCodeCamp.org: If you want to learn to code, this is the channel to visit. They go deep into the practical and theory side and even have the full Harvard Computer Science University course as a 25-hour video. ",
    "url": "/resources/#game-programming-resources",
    
    "relUrl": "/resources/#game-programming-resources"
  },"188": {
    "doc": "Resources",
    "title": "UI",
    "content": "Game UI Database: A collection of reference images clearly showing key UI elements for thousands of games. Game-icons.net: A collection of thousands of game icons (CC 3.0 Licence). ",
    "url": "/resources/#ui",
    
    "relUrl": "/resources/#ui"
  },"189": {
    "doc": "Resources",
    "title": "Fonts",
    "content": "Google Fonts – Offers a wide variety of fonts that are free for personal and commercial use. It’s easy to integrate into both web and game projects. DaFont – A large collection of fonts, many of which are free for personal use (and some for commercial use). It’s popular for more creative and themed fonts. 1001 Free Fonts – Offers a variety of fonts, with some fonts available for commercial use. Be sure to check the licensing for each font. FontSpace – A large community-driven collection of free fonts, many of which are free for commercial use. Always check the font license. ",
    "url": "/resources/#fonts",
    
    "relUrl": "/resources/#fonts"
  },"190": {
    "doc": "Resources",
    "title": "Music",
    "content": "Free Music Archive (FMA) – A great resource for free music under various licenses, including Creative Commons. It’s a good place to find royalty-free music for your game. Incompetech – Created by composer Kevin MacLeod, Incompetech offers a large library of royalty-free music that can be used for games, with proper attribution required. Bensound – Offers royalty-free music, with many tracks available for free with attribution. Great for background music in games. ",
    "url": "/resources/#music",
    
    "relUrl": "/resources/#music"
  },"191": {
    "doc": "Resources",
    "title": "Sound Effects",
    "content": "GDC Free Sound and Music: Every year, the Game Developers Conference (GDC) offers a collection of free sound effects and music that can be used in your games. The collection includes tracks from the GDC Audio and Music track, often showcasing great work from professionals in the industry. You can access these resources for free after registering with GDC. Freesound A collaborative database of audio clips, many of which are free for use under a Creative Commons license. You can find a wide range of sound effects, from nature sounds to urban noises. SoundBible – Provides free sound effects that are either public domain or Creative Commons-licensed, perfect for game development. FreeSoundEffects – A collection of royalty-free sound effects, with many available for both personal and commercial use. BBC Sound Effects Archive – A massive collection of over 16,000 sound effects, available for free under a RemArc license for personal and educational use. ",
    "url": "/resources/#sound-effects",
    
    "relUrl": "/resources/#sound-effects"
  },"192": {
    "doc": "Resources",
    "title": "Textures",
    "content": "AmbientCG – Offers high-quality textures under a Creative Commons CC0 license, meaning you can use them for any project, even commercial ones. They have a wide range of textures, including materials, wood, metals, and more. Texture Haven – A great resource for high-quality, free textures with a focus on photorealistic materials. All textures are available under the CC0 license. Textures.com – Provides a large library of free textures, with a focus on realistic materials. They offer free textures with a limitation on the number of downloads per day, and a paid option for more frequent downloads. CGBookcase – A collection of high-quality textures, all free for personal and commercial use, under a CC0 license. It includes a variety of materials such as fabrics, metals, and bricks. Share Textures – Offers a variety of free textures, including PBR (physically-based rendering) textures, which are great for game engines like Unity and Unreal. 3DTextures.me A library of PBR and high-quality textures that are free to use under a Creative Commons license. They have a wide range of textures for environments, buildings, and materials. FreePBR.com – Focuses on providing free PBR (Physically Based Rendering) textures, useful for realistic game environments. Textures are free to use for both personal and commercial projects. GameTextures – Offers both free and paid textures, with a range of materials like metal, wood, and rock. The free options include a good selection, and you can use them in commercial projects with proper attribution. ",
    "url": "/resources/#textures",
    
    "relUrl": "/resources/#textures"
  },"193": {
    "doc": "Resources",
    "title": "Animations",
    "content": "Mixamo A fantastic resource for free, high-quality 3D character animations. It allows you to upload your own models or use their library of free characters and animations. All animations are free for commercial and non-commercial use. OpenGameArt – Offers a variety of 2D and 3D assets, including character animations, free for use in your games. The animations available are licensed under Creative Commons or public domain. Kenney – Known for its high-quality, free game assets, Kenney provides 2D and 3D character animations. All assets are free to use in commercial and non-commercial projects. Unity Asset Store (Free Section) – The Unity Asset Store has a collection of free animation packs for both 2D and 3D models. These can be used in Unity projects with clear licensing terms, which can include commercial use. ",
    "url": "/resources/#animations",
    
    "relUrl": "/resources/#animations"
  },"194": {
    "doc": "Resources",
    "title": "3D Models",
    "content": "TurboSquid: While TurboSquid is primarily a paid service, they offer a selection of free models, including characters, environments, and vehicles. CGTrader: A marketplace offering free 3D models, with a range of categories from low-poly characters to more detailed models suitable for game use. Sketchfab: A platform where creators can share 3D models, including both free and paid assets. Sketchfab’s library contains numerous free models, ranging from characters to environment assets. OpenGameArt: Offers a large collection of free 3D models, textures, and assets for game development, with many models suitable for prototyping and indie projects. Kenney: A well-known creator of free game assets, Kenney provides 3D models for characters, environments, and other game elements. Clara.io: A cloud-based 3D modeling tool with a library of free 3D models. You can find a variety of free models for use in games and other projects. Free3D: A repository offering free 3D models in various formats, including .obj, .fbx, and .3ds, for use in game development. ",
    "url": "/resources/#3d-models",
    
    "relUrl": "/resources/#3d-models"
  },"195": {
    "doc": "Resources",
    "title": "3D Humanoid Characters",
    "content": "Mixamo: Mixamo offers a vast collection of free 3D character animations that are ready to be applied to your models. You can upload your own 3D models or choose from a variety of characters provided by Mixamo. The animations cover a wide range of actions, from running and jumping to combat and dancing. All animations are free for both personal and commercial use. OpenGameArt: OpenGameArt provides a range of free 3D animated character models. The site includes fully rigged characters with animation sets for various actions, such as walking, running, and attacking. Models and animations are generally licensed under Creative Commons or public domain, allowing for free use in both personal and commercial projects. Kenney: Kenney’s free asset packs include animated 3D character models, along with animations for movements such as walking and jumping. The models are fully rigged and ready to be used in your projects. All assets from Kenney are free for both commercial and non-commercial use, with no attribution required. ",
    "url": "/resources/#3d-humanoid-characters",
    
    "relUrl": "/resources/#3d-humanoid-characters"
  },"196": {
    "doc": "Resources",
    "title": "Terrain Tools",
    "content": "World Machine (Free Version): World Machine is a powerful terrain generation tool that allows you to create realistic, complex terrains using an intuitive node-based system. The free version includes basic features, enabling you to generate heightmaps, apply erosion effects, and export terrains. Gaea (Free Version): Gaea is another terrain generation tool that offers a free version with powerful terrain-building features. It allows for the creation of heightmaps, erosion effects, and other features like textures and materials for creating realistic terrains. ",
    "url": "/resources/#terrain-tools",
    
    "relUrl": "/resources/#terrain-tools"
  },"197": {
    "doc": "Resources",
    "title": "Useful Unity Tools",
    "content": "DOTween: A fast and efficient animation system that works with Unity’s tweening features to create smooth animations for any kind of object or property. PrimeTween: A high-performance animation and sequencing tool designed to provide maximum flexibility and speed for complex animation systems. PlayerPref Editor: A user-friendly editor tool for managing Unity PlayerPrefs, allowing easy access and modification of saved data. Sticky Notes: A tool that lets developers place sticky notes in the Unity Editor for better organization and reminders within the project. Editor Attributes: A package that provides useful attributes to improve Unity Editor interfaces, such as custom labels, color-coding, and tooltips. Serialized Dictionary: A Unity plugin for using dictionaries in the Inspector, offering a more flexible data structure for game developers. Fast Script Reload: A tool that speeds up script reloading during development, reducing iteration times and enhancing productivity for Unity developers. ",
    "url": "/resources/#useful-unity-tools",
    
    "relUrl": "/resources/#useful-unity-tools"
  },"198": {
    "doc": "Resources",
    "title": "Resources",
    "content": " ",
    "url": "/resources/",
    
    "relUrl": "/resources/"
  },"199": {
    "doc": "String Nodes",
    "title": "String Nodes",
    "content": "Below is a summary of all the visual scripting nodes which return a string in the visual scripting system. ",
    "url": "/_pages/visual-coding/string-nodes.html",
    
    "relUrl": "/_pages/visual-coding/string-nodes.html"
  },"200": {
    "doc": "String Nodes",
    "title": "Contents",
    "content": ". | Specify a Specific String | String Nodes | Unit Nodes (Variables) | . Specify a Specific String . If the visual scripting node allows it, you will be able to specify a specific string for the node, rather than using one of the methods below. String Nodes . String . Name of Unit . Returns the name of the given unit. Note that its name is specified by the unitName, and is not the name of the prefab which you see when selecting the unit from the dropdown. String . Name of Ability . Returns the name of the given ability. String . Tag of Ability . Returns the tag of the given ability. String . Tag of Item . Returns the tag of the given item. String . Combine Strings . Combines two strings together using string concatenation. Unit Nodes (Variables) . String &gt; Variable . String variable . Returns the string stored in the variable with the given name. This variable is shared between all scripts in the same “block” (e.g., ability/item). String &gt; Variable . Global String variable . Returns the string stored in the global variable with the given name. This variable is shared across the entire application. ",
    "url": "/_pages/visual-coding/string-nodes.html",
    
    "relUrl": "/_pages/visual-coding/string-nodes.html"
  },"201": {
    "doc": "Systems",
    "title": "Systems",
    "content": "The monster class controls the logic for all non-player units that are controlled by the AI system. The Monster class inherits from the Unit class, so all Unit methods and logic apply to the monsters as well. ",
    "url": "/_pages/systems/systems.html",
    
    "relUrl": "/_pages/systems/systems.html"
  },"202": {
    "doc": "Unit Nodes",
    "title": "Unit Nodes",
    "content": "Below is a summary of all the visual scripting nodes which return a unit in the visual scripting system. ",
    "url": "/_pages/visual-coding/unit-nodes.html",
    
    "relUrl": "/_pages/visual-coding/unit-nodes.html"
  },"203": {
    "doc": "Unit Nodes",
    "title": "Contents",
    "content": ". | Specify a Specific Unit | Unit Nodes (Distance) | Unit Nodes (Random) | Unit Nodes (Variables) | Unit Nodes (Other) | . Specify a Specific Unit . If the visual scripting node allows it, you will be able to specify a specific unit for the node, rather than using one of the methods below (e.g., when spawning a unit). Unit Nodes (Distance) . Unit &gt; Distance . Closest unit near point . Returns the closest unit to the specified point (within the maximum distance). Unit &gt; Distance . Furthest unit near point . Returns the furthest unit to the specified point (within the maximum distance). Unit &gt; Distance . Closest unit near unit . Returns the closest unit to the specified unit (within the maximum distance). Unit &gt; Distance . Furthest unit near unit . Returns the furthest unit to the specified unit (within the maximum distance). Unit Nodes (Random) . Unit &gt; Random . Random unit near point . Returns a random unit within a given distance of a given unit. Unit &gt; Random . Random unit near point . Returns a random unit within a given distance of a given point. Unit Nodes (Variables) . Unit &gt; Variable . Unit variable . Returns the unit stored in the variable with the given name. This variable is shared between all scripts in the same “block” (e.g., ability/item). Unit &gt; Variable . Global Unit variable . Returns the unit stored in the global variable with the given name. This variable is shared across the entire application. Unit Nodes (Other) . Unit &gt; Other . Unit with label . Returns the unit in the scene which has the given label. If multiple units have the same label, it will return a random unit. ",
    "url": "/_pages/visual-coding/unit-nodes.html",
    
    "relUrl": "/_pages/visual-coding/unit-nodes.html"
  },"204": {
    "doc": "Visual Coding",
    "title": "Visual Coding",
    "content": "In this guide, you will learn how to set dress an environment to make the space feel more natural and unique. This is especially beneficial when the space has been created using a small set of generic tiles. ",
    "url": "/_pages/visual-coding/visual-coding.html",
    
    "relUrl": "/_pages/visual-coding/visual-coding.html"
  },"205": {
    "doc": "Visual Coding",
    "title": "Contents",
    "content": ". | Visual Coding Structure | Events . | Ability Events | Time Events | Unit Events | Player Events | Region Events | Projectile Events | Quest Events | Input Events | . | Conditions . | Region Conditions | Input Conditions | . | Variable Types | Deleting and Renaming Scripts | Events . | When a unit begins casting this ability | . | . ",
    "url": "/_pages/visual-coding/visual-coding.html",
    
    "relUrl": "/_pages/visual-coding/visual-coding.html"
  },"206": {
    "doc": "Visual Coding",
    "title": "Visual Coding Structure",
    "content": "The visual coding system can be used to define custom logic for the experience without needing to write C# code. Visual Code Scripts follow an Event, Condition, Action structure. | The Event controls when the logic will activate. | The Conditions can be used to create aditional activation requirements. | The Actions control what the script will do. | . Custom visual code can be added to specific items using the Item Editor, to abilities with the Ability Editor, or to the game more generally with the General Script Editor. Below is an example showing the visual code for the War Cry ability. When the ability containing this script is cast, it spawns a visual effect on the caster, then their damage dealt is increased by 25% and damage taken is decreased by 25% for 10 seconds. ",
    "url": "/_pages/visual-coding/visual-coding.html#visual-coding-structure",
    
    "relUrl": "/_pages/visual-coding/visual-coding.html#visual-coding-structure"
  },"207": {
    "doc": "Visual Coding",
    "title": "Events",
    "content": "Below is a summary of all the events in the visual scripting system, with a short summary of each and an outline of any associated preset values which will be populated from the event. Ability Events . When a unit begins casting this ability This event will only trigger if it is attached to an ability, and will only trigger for the unit that cast the ability. It will trigger when the ability starts casting. If you want to handle the ability cast logic, it is recommended you use the When a unit finishes casting this ability event instead. The event populates the following preset values: . | Casting Unit (Unit): The unit that cast the ability. | Ability Target Location (Location): The location that the ability should be cast at. | Target Unit (Unit): The target unit for the ability (only exists if the ability targets a specific unit). | . When a unit finishes casting this ability This event will only trigger if it is attached to an ability, and will only trigger for the unit that cast the ability. It will trigger when the ability finishes casting, and is the main event you should use to execute logic when coding the logic for an ability cast. The event populates the following preset values: . | Casting Unit (Unit): The unit that cast the ability. | Ability Target Location (Location): The location that the ability should be cast at. | Target Unit (Unit): The target unit for the ability (only exists if the ability targets a specific unit). | . Time Events . On script loaded This event will trigger when the script is loaded. The script is loaded when the logic should start being ‘checked’. If the script is attached to an ability, this will either be triggered when the unit spawns, or the ability is added to the unit. If the script is attached to an item, it is triggered when the item is equipped. If the script is attached to a general script, it will be triggered when the game begins. This event is often used to handle setup logic. The event populates no preset values. On script unloaded This event will trigger when the script is unloaded. The script is unloaded when the logic should stop being ‘checked’. If the script is attached to an ability, this will either be triggered when the unit dies, or the ability is removed from the unit. If the script is attached to an item, it is triggered when the item is unequipped. The event populates no preset values. Do every frame This event will trigger every game frame. This can be very powerful if you need to constantly check if something has happened, but should be avoided if you are executing complex game logic (e.g., don’t spawn visual effects every frame). The event populates no preset values. Do after X seconds This event will trigger a specific amount of time after the script is first loaded, and then won’t trigger again. You can specify the exact amount of time in the number node on the event. The event populates no preset values. Do every X seconds This event will repeatedly trigger, with a delay between each execution. Specify the exact amount of time to delay between executions in the number node on the event. The event populates no preset values. Unit Events . Unit is killed This event is triggered every time a unit is killed, regardless of faction or how it was killed (e.g., it could be an ally, a monster, or the player itself). The event populates the following preset values: . | Killed Unit (Unit): The unit that was killed. | Killing Unit (Unit): The unit that killed the dying unit. | Killing Ability (Ability): The ability that killed the dying unit. | Is Critical (Boolean): True if the ability was a critical, otherwise False. | . Unit is damaged This event is triggered every time a unit is damaged, regardless of faction or how it was damaged (e.g., it could be an ally, a monster, or the player itself). The event populates the following preset values: . | Damaged Unit (Unit): The unit that was damaged. | Damaging Unit (Unit): The unit that damaged the dying unit. | Damaging Ability (Ability): The ability that damaged the damaged unit. | Damage Dealt (Number): The amount of damage done by the ability. | Is Critical (Boolean): True if the ability was a critical, otherwise False. | . Unit is healed This event is triggered every time a unit is healed, regardless of faction or how it was healed (e.g., it could be an ally, a monster, or the player itself). The event populates the following preset values: . | Healed Unit (Unit): The unit that was healed. | Healing Unit (Unit): The unit that healed the unit. | . Unit gains resource This event is triggered every time a unit gains resource (except from base regeneration). The event populates the following preset values: . | Triggering Unit (Unit): The unit that gained sources. | Resources Gained (Number): The amount of resources gained. | . Unit loses resource This event is triggered every time a unit loses resource. The event populates the following preset values: . | Triggering Unit (Unit): The unit that lost sources. | Resources Gained (Number): The amount of resources lost. | . Player Events . Player gains experience This event is triggered every time the player gains experience. The event does not populate any preset values. Player gains a level This event is triggered every time the player gains a level. The event does not populate any preset values. Player sells an item This event is triggered every time the player sells an item through the shop. The event populates the following preset values: . | Triggering Item (Unit): The item that was sold. | . Player buys an item This event is triggered every time the player buys an item through the shop. The event populates the following preset values: . | Triggering Item (Unit): The item that was purchased. | . Player equips an item This event is triggered every time the player equips an item. The event populates the following preset values: . | Triggering Item (Unit): The item that was equipped. | . Player unequips an item This event is triggered every time the player unequips an item. The event populates the following preset values: . | Triggering Item (Unit): The item that was unequipped. | . Player picks up gold This event is triggered every time the player picks up gold. The event populates the following preset values: . | Gold Added (Number): The amount of gold collected. | . Player picks up a health globe This event is triggered every time the player picks up a health globe. The event populates the following preset values: . | Health Restored (Number): The amount of health restored. | . Region Events . Unit enters region This event is triggered when the player enters a region with a specific name. Use the text slot in the event to specify the exact region name. This must match the name on the region exactly. The event does not populate any preset values. Unit leaves region This event is triggered when the player leave a region with a specific name. Use the text slot in the event to specify the exact region name. This must match the name on the region exactly. The event does not populate any preset values. Projectile Events . Projectile collides with an enemy This event is triggered when a projectile spawned by this ability or item collides with an enemy of its owner. Note that for optimisation purposes, you cannot use this event to check if a projectile created from another source collided with an enemy. exactly. The event populates the following preset values: . | Event Projectile (Projectile): The projectile that collided. | Casting Unit (Unit): The unit that created the projectile. | Colliding Unit (Unit): The unit that was hit by the projectile. | . Projectile times out This event is triggered when a projectile spawned by this ability or item exceeds its assigned lifetime. Note that you must have first assigned a lifetime to the projectile via the Projectile &gt; Set Lifetime action. exactly. The event populates the following preset values: . | Event Projectile (Projectile): The projectile that is timing out. | Casting Unit (Unit): The unit that created the projectile. | . Projectile reaches its goal This event is triggered when a projectile spawned by this ability reaches its goal. This only triggers if the projectile was assigned a goal location, via the Projectile &gt; Move Projectile Towards Point action. The event populates the following preset values: . | Event Projectile (Projectile): The projectile that is timing out. | Casting Unit (Unit): The unit that created the projectile. | Goal Position (Location): The final gloal location. | Goal Unit (Unit): The goal unit. This is only assigned if the projectile was assigned to move towards a specific unit. | . Projectile collides with terrain This event is triggered when a projectile spawned by this ability/item collides with terrain (e.g., a wall). The event populates the following preset values: . | Event Projectile (Projectile): The projectile that collided with terrain. | Casting Unit (Unit): The unit that created the projectile. | . Quest Events . On quest received This event is triggered when the player receives a specific quest. Use the text slot in the event to specify the exact quest name. This must match the name of the quest exactly. The event does not populate any preset values. On quest completed This event is triggered when the player completes a specific quest. Use the text slot in the event to specify the exact quest name. This must match the name of the quest exactly.exactly. The event does not populate any preset values. Input Events . On key down This event is triggered when the player presses a specific key. Use the text slot in the event to specify the exact key. For simple keys, just enter the key (e.g., enter ‘f’ if you want to check for the f key being pressed). If you want to check more “complex” keybinds, refer to the lists in the discussion thread here. The event does not populate any preset values. On key up This event is triggered when the player releases a specific key. Use the text slot in the event to specify the exact key. For simple keys, just enter the key (e.g., enter ‘f’ if you want to check for the f key being pressed). If you want to check more “complex” keybinds, refer to the lists in the discussion thread here. The event does not populate any preset values. On key held This event is triggered when the player every frame while they are holding a specific key. Use the text slot in the event to specify the exact key. For simple keys, just enter the key (e.g., enter ‘f’ if you want to check for the f key being pressed). If you want to check more “complex” keybinds, refer to the lists in the discussion thread here. The event does not populate any preset values. ",
    "url": "/_pages/visual-coding/visual-coding.html#events",
    
    "relUrl": "/_pages/visual-coding/visual-coding.html#events"
  },"208": {
    "doc": "Visual Coding",
    "title": "Conditions",
    "content": "Region Conditions . Condition &gt; Region . Region exists . True if a region with the exact name currently exists. Condition &gt; Region . Unit is in region . True if the specified unit is currently in a region with the specified name. The name must match the region exactly. Input Conditions . Condition &gt; Input . Key is held . True if the specified key is currently being held. For simple keys, just enter the key (e.g., enter ‘f’ if you want to check for the f key being pressed). If you want to check more “complex” keybinds, refer to the lists in the discussion thread here. | Time |   | . | On Script Loaded | N/A | . | On script unloaded test |   | . | Actions |   | . | Wait | Wait for [NUMBER] seconds. | . | If Statement | Do actions if [BOOL] | . | While Statement | Do actions while [BOOL] | . ",
    "url": "/_pages/visual-coding/visual-coding.html#conditions",
    
    "relUrl": "/_pages/visual-coding/visual-coding.html#conditions"
  },"209": {
    "doc": "Visual Coding",
    "title": "Variable Types",
    "content": ". | TEXT: Plain text. | NUMBER: A decimal number. | ABILITY: An ability object. | ITEM: An item object. | PROJECTILE: | AUDIO CLIP: A sound file. | UNIT: A single unit. | UNIT GROUP: A group of units (could be empty). | EFFECT: A particle effect which can be spawned. | POSITION: A Vector representing a position. | OPTION: Select from a preset list (e.g., the exact stat that should be modified). | . ",
    "url": "/_pages/visual-coding/visual-coding.html#variable-types",
    
    "relUrl": "/_pages/visual-coding/visual-coding.html#variable-types"
  },"210": {
    "doc": "Visual Coding",
    "title": "Deleting and Renaming Scripts",
    "content": " ",
    "url": "/_pages/visual-coding/visual-coding.html#deleting-and-renaming-scripts",
    
    "relUrl": "/_pages/visual-coding/visual-coding.html#deleting-and-renaming-scripts"
  },"211": {
    "doc": "Visual Coding",
    "title": "Events",
    "content": "When a unit begins casting this ability . | Type | Variable | Description | . | float | healthPickedUp | The amount of health that was picked up. | . The . ",
    "url": "/_pages/visual-coding/visual-coding.html#events-1",
    
    "relUrl": "/_pages/visual-coding/visual-coding.html#events-1"
  }
}
