{"0": {
    "doc": "About",
    "title": "Welcome to the About Page 2",
    "content": "This is an example page that uses the Just the Docs template. You can write Markdown here, or add custom HTML if needed. ",
    "url": "/about/#welcome-to-the-about-page-2",
    
    "relUrl": "/about/#welcome-to-the-about-page-2"
  },"1": {
    "doc": "About",
    "title": "Features",
    "content": ". | Clean layout | Responsive design | Easy to use | . ",
    "url": "/about/#features",
    
    "relUrl": "/about/#features"
  },"2": {
    "doc": "About",
    "title": "About",
    "content": " ",
    "url": "/about/",
    
    "relUrl": "/about/"
  },"3": {
    "doc": "Game Camera",
    "title": "Game Camera",
    "content": "The main scene in the ARPG contains only one main camera. ",
    "url": "/camera/",
    
    "relUrl": "/camera/"
  },"4": {
    "doc": "Game Camera",
    "title": "Repositioning the Camera",
    "content": "You can change the offset of the camera (including as its angle and distance from the player) by changing its location in the scene relative to the player. When the game starts, it will calculate the difference in location between the player and the camera and match this for the entire game. ",
    "url": "/camera/#repositioning-the-camera",
    
    "relUrl": "/camera/#repositioning-the-camera"
  },"5": {
    "doc": "Game Camera",
    "title": "Highlighting Points of Interest",
    "content": "You can highlight points of interest in the game, which will allow you to pan to the given location. This is an example page that uses the Just the Docs template. You can write Markdown here, or add custom HTML if needed. ",
    "url": "/camera/#highlighting-points-of-interest",
    
    "relUrl": "/camera/#highlighting-points-of-interest"
  },"6": {
    "doc": "Game Camera",
    "title": "Features",
    "content": ". | Clean layout | Responsive design | Easy to use | . Default label . Blue label . Stable . New release . Coming soon . Deprecated . ",
    "url": "/camera/#features",
    
    "relUrl": "/camera/#features"
  },"7": {
    "doc": "Item Pickup",
    "title": "The ItemPickup Class",
    "content": "The ItemPickup class is used to control the generation of item pickups. ",
    "url": "/class-itempickup.html#the-itempickup-class",
    
    "relUrl": "/class-itempickup.html#the-itempickup-class"
  },"8": {
    "doc": "Item Pickup",
    "title": "Placing an Item Pickup in the World",
    "content": "In the base project, you can find the Item Pickup prefab under Assets &gt; Assets to Use &gt; ItemPickup. Drag this prefab into the environment and place it where you want it. In the inspector, you can then choose to either specify a specific item for the pickup, or the intended rarity for the randomised item. ",
    "url": "/class-itempickup.html#placing-an-item-pickup-in-the-world",
    
    "relUrl": "/class-itempickup.html#placing-an-item-pickup-in-the-world"
  },"9": {
    "doc": "Item Pickup",
    "title": "Spawning an Item Pickup",
    "content": "// Items are scriptable objects. If you expose the item variable in the inspector, // you can select the item template you want to use. public Item itemToSpawn; // Spawn an item pickup containing the specified item. ItemPickup.Spawn(spawnLocation, itemToSpawn); // Spawn an item pickup containing a random item of the specified rarity. ItemPickup.Spawn(spawnLocation, Item.ItemRarity.Common); ItemPickup.Spawn(spawnLocation, Item.ItemRarity.Rare); ItemPickup.Spawn(spawnLocation, Item.ItemRarity.Legendary); . The experience can be developed without any code, but if you do want to use code to develop your items, abilities, quests or other content to control complex logic which cannot easi . ",
    "url": "/class-itempickup.html#spawning-an-item-pickup",
    
    "relUrl": "/class-itempickup.html#spawning-an-item-pickup"
  },"10": {
    "doc": "Item Pickup",
    "title": "Contents",
    "content": ". | The ItemPickup Class . | Placing an Item Pickup in the World | Spawning an Item Pickup | Public Methods . | Modifying Unit Health | Modifying Unit Resources | Modifying Unit Abilities | Checking Unit Statuses | Moving a Unit | Visual Effects | Applying a Buff | Modifying a Stat | Modifying a Specific Unit Ability | Damaging a Unit | . | Download the Model | Import the Mixamo Model | Importing Mixamo Animations | Features | . | . ",
    "url": "/class-itempickup.html",
    
    "relUrl": "/class-itempickup.html"
  },"11": {
    "doc": "Item Pickup",
    "title": "Public Methods",
    "content": "You can interact with units via the public methods. These allow you to modify unit stats, visuals, and other key properties. Modifying Unit Health . // Add 100 to the unit's current health. unit.AddHealth(100); // Remove 100 from the unit's current health. unit.RemoveHealth(100); . Modifying Unit Resources . // Add 100 to the unit's current resource count. unit.AddResource(100); // Remove 100 from the unit's current resource count. unit.RemoveResource(100); . Modifying Unit Abilities . // Add the specified ability to the unit. unit.AddAbility(abilityTemplate); // Remove the specified ability from the unit. unit.RemoveAbility(abilityTemplate); // Replace the current specified ability with the specified ability. If the unit does // not have the 'current' ability, they will not get the new ability. unit.ReplaceAbility(currentAbilityTemplate, newAbilityTemplate); // Lock the given ability, preventing the unit from casting it. If the unit does not // have an ability with a matching template, this will do nothing. unit.LockAbility(abilityTemplate); // Unlock the given ability, allowing the unit to cast it. If the unit does not // have an ability with a matching template, this will do nothing. unit.UnlockAbility(abilityTemplate); . Checking Unit Statuses . // Check to see if the unit is currently stunned. bool isStunned = unit.IsStunned(); // Check to see if the unit is currently moving. bool isMoving = unit.IsMoving(); // Check to see if the unit is currently casting an ability. bool isCasting = unit.IsCasting(); // Check to see if the specified unit is an enemy of the unit. bool isEnemy = unit.IsEnemy(unitToCompare); // Check to see if the specified unit is an ally of the unit. bool isAlly = unit.IsAlly(unitToCompare); // Check to see if the unit has a specific buff/debuff. bool hasBuff = unit.HasBuff(\"NameOfBuff\"); // Check to see if the unit is currently able to move. bool canMove = unit.CanMove(); . Moving a Unit . // Instantly move the unit to the specified location. unit.Teleport(newPosition); // Smoothly move the unit to the specified location in the specified amount of time. unit.MoveOverTime(newPosition, timeToReachDestination); . Visual Effects . // Set the outline colour for the unit. unit.SetOutline(Color.red); // Set the outline colour and size for the unit. unit.SetOutline(Color.red, outlineSize, outlineAlpha); // Have the unit play the specified animation (the name must match a node in the Animator). unit.PlayAnimation(\"AnimationName\"); // Rotate the unit by the given amount (in degrees) over the given duration. unit.StartSpin(degreesToRotate, duration); . Applying a Buff . // Set the outline colour for the unit. unit.SetOutline(Color.red); // Set the outline colour and size for the unit. unit.SetOutline(Color.red, outlineSize, outlineAlpha); // Have the unit play the specified animation (the name must match a node in the Animator). unit.PlayAnimation(\"AnimationName\"); // Rotate the unit by the given amount (in degrees) over the given duration. unit.StartSpin(degreesToRotate, duration); . Modifying a Stat . // Permanently modifies the movement speed of the unit. In this case, // it will increase the movement speed of the unit by 20%. // // Valid Stats include: // - Damage // - MaxHealth // - MaxResource // - CriticalStrikeChance // - CriticalStrikeDamage // - Armor // - AttacksPerSecond // - CooldownReduction // - MovementSpeed // - ResourceCostReduction // - ResourceGeneration unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f); // Temporarily modifies the movement speed of the unit. In this case, // it will increase the movement speed of the unit by 20% for 10 seconds. unit.stats[Stat.MovementSpeed].AddTimedPercentageModifier(1.2f, 10.0f); // A buff name can also be given when applying a buff or debuff. This lets you // reference it later if you want to remove or modify it (e.g., an ability may // give the player a movement speed boost until they next take damage). unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f, \"Sprint\"); // If a buff name is given, a maximum number of buff 'stacks' can also be specified. // This limits how many times this effect can be applied to the unit. In this case, // the unit can have three sprint modifiers applied (resulting in a 60% speed increase). unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f, \"Sprint\", 3); // This method can be used to remove all existing modifiers with a matching label. unit.stats[Stat.Damage].RemoveModifiersWithLabel(\"Sprint\"); // A stat modifier can also be a specific value, rather than a percentage. In this case, // the base damage of all attacks is increased by 5 instead of a percentage modifier. unit.stats[Stat.Damage].AddValueModifier(5); . Modifying a Specific Unit Ability . // Modifies the damage of the specified ability on the specified unit. // In this example, the ability would do 50% more damage. unit.AddAbilityDamageModifier(ability, 1.5f); // Modifies the cooldown of the specified ability on the specified unit. // In this example, the ability cooldown will be reduced by 50%. unit.AddAbilityCooldownModifier(ability, 0.5f); // Modifies the cost of the specified ability on the specified unit. // In this example, the ability would be reduced to 10% of its current cost. unit.AddAbilityCostModifier(ability, 0.1f); // Just like with stat modifiers, the ability modifiers can also be timed. // In this example, the ability would deal double damage for five seconds. unit.AddTimedAbilityDamageModifier(ability, 2.0f, 5.0f); // Just like with stat modifiers, the ability modifiers can also be given a // reference name, and a maximum stack count. unit.AddTimedAbilityDamageModifier(ability, 2.0f, 5.0f, \"Frenzy\", 1); // Use this method to remove all ability modifiers from an ability which have // the given reference name (e.g., this would remove the frenzy buff in the previous example). unit.RemoveAbilityBuffModifiers(ability, \"Frenzy\"); . Damaging a Unit . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . ",
    "url": "/class-itempickup.html#public-methods",
    
    "relUrl": "/class-itempickup.html#public-methods"
  },"12": {
    "doc": "Item Pickup",
    "title": "Download the Model",
    "content": ". | Go to Mixamo. | Log in, or create a new account if you do not already have one. | Select or upload your character model. | Customize the animation if needed by selecting from the animations available. | Click the Download button. | Choose the following options for Unity: . | Format: FBX for Unity. | Pose: T-Pose. | Animation: If you want to include the animation, make sure it’s selected. | Skin: With Skin. | . | Click the Download button in the popup. | . ",
    "url": "/class-itempickup.html#download-the-model",
    
    "relUrl": "/class-itempickup.html#download-the-model"
  },"13": {
    "doc": "Item Pickup",
    "title": "Import the Mixamo Model",
    "content": ". | Open your Unity project. | In the Project window, navigate to the folder you want to import the model into. | Drag the downloaded FBX file into the Unity folder, or right-click and select Import New Asset to locate and import the file manually. | Once imported, select the model in the Project window. | In the Inspector, go to the Model tab and ensure the Animation Type is set to Humanoid (for human-like characters) or Generic (for other types of models). | Under the Material section, if you’re using the legacy shader, check Import Materials and Use Legacy Materials to ensure proper texture mapping. This will help the model use the correct materials that were imported with the FBX. | Click Apply. | . ",
    "url": "/class-itempickup.html#import-the-mixamo-model",
    
    "relUrl": "/class-itempickup.html#import-the-mixamo-model"
  },"14": {
    "doc": "Item Pickup",
    "title": "Importing Mixamo Animations",
    "content": ". | Go to Mixamo.com. | Log in, or create a new account if you do not already have one. | . Mixamo models use different avatars for defining animations. This means that an animation shown on one character may not look correct if it is applied to a different character. If you encounter this problem, you should use a T-Pose for the avatar instead. dfgdfgdfg . ",
    "url": "/class-itempickup.html#importing-mixamo-animations",
    
    "relUrl": "/class-itempickup.html#importing-mixamo-animations"
  },"15": {
    "doc": "Item Pickup",
    "title": "Features",
    "content": ". | Clean layout | Responsive design | Easy to use | . Default label . Blue label . Stable . New release . Coming soon . Deprecated . ",
    "url": "/class-itempickup.html#features",
    
    "relUrl": "/class-itempickup.html#features"
  },"16": {
    "doc": "Item Pickup",
    "title": "Item Pickup",
    "content": " ",
    "url": "/class-itempickup.html",
    
    "relUrl": "/class-itempickup.html"
  },"17": {
    "doc": "Monster",
    "title": "The Monster Class",
    "content": "The monster class controls the logic for all non-player units that are controlled by the AI system. The Monster class inherits from the Unit class, so all Unit methods and logic apply to the monsters as well. ",
    "url": "/class-monster.html#the-monster-class",
    
    "relUrl": "/class-monster.html#the-monster-class"
  },"18": {
    "doc": "Monster",
    "title": "Contents",
    "content": ". | The Monster Class . | Monster Logic . | Monster Sleeping | Target Selection | Monster Movement | . | Public Methods . | Modifying Unit Health | Modifying Unit Resources | Modifying Unit Abilities | Checking Unit Statuses | Moving a Unit | Visual Effects | Applying a Buff | Modifying a Stat | Modifying a Specific Unit Ability | Damaging a Unit | . | Download the Model | Import the Mixamo Model | Importing Mixamo Animations | Features | . | . ",
    "url": "/class-monster.html",
    
    "relUrl": "/class-monster.html"
  },"19": {
    "doc": "Monster",
    "title": "Monster Logic",
    "content": "Monster Sleeping . If there are no valid nearby targets within the detection range, the monster will ‘sleep’. It will not try to move or cast abilities. Monster sleeping helps to save processing power, and also ensures that monsters won’t immediately try to walk towards the player on the other side of a map (e.g., if they have been manually placed into the environment). Target Selection . Monsters will automatically use all of their abilities, if they are valid to cast (i.e., they will cast them as soon as they are in-range, the ability is off-cooldown, they have sufficient resources and all other conditions are met). Monsters will choose to target the closest valid unit with their abilities. Monster Movement . Monsters will move towards their target until all of their abilities are in range. For example, if a monster has a ranged attack and a melee attack, they will move forward until they are close enough to use their melee attack (stopping along the way to cast their ranged attack when it is off cooldown). Monsters with no abilities, or no abilities that target an enemy, will remain stationary and not try to move towards any target. ",
    "url": "/class-monster.html#monster-logic",
    
    "relUrl": "/class-monster.html#monster-logic"
  },"20": {
    "doc": "Monster",
    "title": "Public Methods",
    "content": "You can interact with a Monster via its public methods. These allow you to modify stats, visuals, and other key properties. Monsters have all of the public methods available to a unit, as well as the following: . Modifying Unit Health . // Add 100 to the unit's current health. unit.AddHealth(100); // Remove 100 from the unit's current health. unit.RemoveHealth(100); . Modifying Unit Resources . // Add 100 to the unit's current resource count. unit.AddResource(100); // Remove 100 from the unit's current resource count. unit.RemoveResource(100); . Modifying Unit Abilities . // Add the specified ability to the unit. unit.AddAbility(abilityTemplate); // Remove the specified ability from the unit. unit.RemoveAbility(abilityTemplate); // Replace the current specified ability with the specified ability. If the unit does // not have the 'current' ability, they will not get the new ability. unit.ReplaceAbility(currentAbilityTemplate, newAbilityTemplate); // Lock the given ability, preventing the unit from casting it. If the unit does not // have an ability with a matching template, this will do nothing. unit.LockAbility(abilityTemplate); // Unlock the given ability, allowing the unit to cast it. If the unit does not // have an ability with a matching template, this will do nothing. unit.UnlockAbility(abilityTemplate); . Checking Unit Statuses . // Check to see if the unit is currently stunned. bool isStunned = unit.IsStunned(); // Check to see if the unit is currently moving. bool isMoving = unit.IsMoving(); // Check to see if the unit is currently casting an ability. bool isCasting = unit.IsCasting(); // Check to see if the specified unit is an enemy of the unit. bool isEnemy = unit.IsEnemy(unitToCompare); // Check to see if the specified unit is an ally of the unit. bool isAlly = unit.IsAlly(unitToCompare); // Check to see if the unit has a specific buff/debuff. bool hasBuff = unit.HasBuff(\"NameOfBuff\"); // Check to see if the unit is currently able to move. bool canMove = unit.CanMove(); . Moving a Unit . // Instantly move the unit to the specified location. unit.Teleport(newPosition); // Smoothly move the unit to the specified location in the specified amount of time. unit.MoveOverTime(newPosition, timeToReachDestination); . Visual Effects . // Set the outline colour for the unit. unit.SetOutline(Color.red); // Set the outline colour and size for the unit. unit.SetOutline(Color.red, outlineSize, outlineAlpha); // Have the unit play the specified animation (the name must match a node in the Animator). unit.PlayAnimation(\"AnimationName\"); // Rotate the unit by the given amount (in degrees) over the given duration. unit.StartSpin(degreesToRotate, duration); . Applying a Buff . // Set the outline colour for the unit. unit.SetOutline(Color.red); // Set the outline colour and size for the unit. unit.SetOutline(Color.red, outlineSize, outlineAlpha); // Have the unit play the specified animation (the name must match a node in the Animator). unit.PlayAnimation(\"AnimationName\"); // Rotate the unit by the given amount (in degrees) over the given duration. unit.StartSpin(degreesToRotate, duration); . Modifying a Stat . // Permanently modifies the movement speed of the unit. In this case, // it will increase the movement speed of the unit by 20%. // // Valid Stats include: // - Damage // - MaxHealth // - MaxResource // - CriticalStrikeChance // - CriticalStrikeDamage // - Armor // - AttacksPerSecond // - CooldownReduction // - MovementSpeed // - ResourceCostReduction // - ResourceGeneration unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f); // Temporarily modifies the movement speed of the unit. In this case, // it will increase the movement speed of the unit by 20% for 10 seconds. unit.stats[Stat.MovementSpeed].AddTimedPercentageModifier(1.2f, 10.0f); // A buff name can also be given when applying a buff or debuff. This lets you // reference it later if you want to remove or modify it (e.g., an ability may // give the player a movement speed boost until they next take damage). unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f, \"Sprint\"); // If a buff name is given, a maximum number of buff 'stacks' can also be specified. // This limits how many times this effect can be applied to the unit. In this case, // the unit can have three sprint modifiers applied (resulting in a 60% speed increase). unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f, \"Sprint\", 3); // This method can be used to remove all existing modifiers with a matching label. unit.stats[Stat.Damage].RemoveModifiersWithLabel(\"Sprint\"); // A stat modifier can also be a specific value, rather than a percentage. In this case, // the base damage of all attacks is increased by 5 instead of a percentage modifier. unit.stats[Stat.Damage].AddValueModifier(5); . Modifying a Specific Unit Ability . // Modifies the damage of the specified ability on the specified unit. // In this example, the ability would do 50% more damage. unit.AddAbilityDamageModifier(ability, 1.5f); // Modifies the cooldown of the specified ability on the specified unit. // In this example, the ability cooldown will be reduced by 50%. unit.AddAbilityCooldownModifier(ability, 0.5f); // Modifies the cost of the specified ability on the specified unit. // In this example, the ability would be reduced to 10% of its current cost. unit.AddAbilityCostModifier(ability, 0.1f); // Just like with stat modifiers, the ability modifiers can also be timed. // In this example, the ability would deal double damage for five seconds. unit.AddTimedAbilityDamageModifier(ability, 2.0f, 5.0f); // Just like with stat modifiers, the ability modifiers can also be given a // reference name, and a maximum stack count. unit.AddTimedAbilityDamageModifier(ability, 2.0f, 5.0f, \"Frenzy\", 1); // Use this method to remove all ability modifiers from an ability which have // the given reference name (e.g., this would remove the frenzy buff in the previous example). unit.RemoveAbilityBuffModifiers(ability, \"Frenzy\"); . Damaging a Unit . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . ",
    "url": "/class-monster.html#public-methods",
    
    "relUrl": "/class-monster.html#public-methods"
  },"21": {
    "doc": "Monster",
    "title": "Download the Model",
    "content": ". | Go to Mixamo. | Log in, or create a new account if you do not already have one. | Select or upload your character model. | Customize the animation if needed by selecting from the animations available. | Click the Download button. | Choose the following options for Unity: . | Format: FBX for Unity. | Pose: T-Pose. | Animation: If you want to include the animation, make sure it’s selected. | Skin: With Skin. | . | Click the Download button in the popup. | . ",
    "url": "/class-monster.html#download-the-model",
    
    "relUrl": "/class-monster.html#download-the-model"
  },"22": {
    "doc": "Monster",
    "title": "Import the Mixamo Model",
    "content": ". | Open your Unity project. | In the Project window, navigate to the folder you want to import the model into. | Drag the downloaded FBX file into the Unity folder, or right-click and select Import New Asset to locate and import the file manually. | Once imported, select the model in the Project window. | In the Inspector, go to the Model tab and ensure the Animation Type is set to Humanoid (for human-like characters) or Generic (for other types of models). | Under the Material section, if you’re using the legacy shader, check Import Materials and Use Legacy Materials to ensure proper texture mapping. This will help the model use the correct materials that were imported with the FBX. | Click Apply. | . ",
    "url": "/class-monster.html#import-the-mixamo-model",
    
    "relUrl": "/class-monster.html#import-the-mixamo-model"
  },"23": {
    "doc": "Monster",
    "title": "Importing Mixamo Animations",
    "content": ". | Go to Mixamo.com. | Log in, or create a new account if you do not already have one. | . Mixamo models use different avatars for defining animations. This means that an animation shown on one character may not look correct if it is applied to a different character. If you encounter this problem, you should use a T-Pose for the avatar instead. dfgdfgdfg . ",
    "url": "/class-monster.html#importing-mixamo-animations",
    
    "relUrl": "/class-monster.html#importing-mixamo-animations"
  },"24": {
    "doc": "Monster",
    "title": "Features",
    "content": ". | Clean layout | Responsive design | Easy to use | . Default label . Blue label . Stable . New release . Coming soon . Deprecated . ",
    "url": "/class-monster.html#features",
    
    "relUrl": "/class-monster.html#features"
  },"25": {
    "doc": "Monster",
    "title": "Monster",
    "content": " ",
    "url": "/class-monster.html",
    
    "relUrl": "/class-monster.html"
  },"26": {
    "doc": "Unit",
    "title": "The Unit Class",
    "content": "While you are not required to write any code in the development of your experience, if you need to implement complex logic for an item, ability, quest, or other game mechanic, this section will show you how it can be done. This page will focus specifically on how you can build an item with custom logic. The experience can be developed without any code, but if you do want to use code to develop your items, abilities, quests or other content to control complex logic which cannot easi . ",
    "url": "/class-unit.html#the-unit-class",
    
    "relUrl": "/class-unit.html#the-unit-class"
  },"27": {
    "doc": "Unit",
    "title": "Contents",
    "content": ". | The Unit Class . | Unit Logic . | Ability Selection | Target Selection | Unit Range | . | Public Methods . | Modifying Unit Health | Modifying Unit Resources | Modifying Unit Abilities | Checking Unit Statuses | Moving a Unit | Visual Effects | Applying a Buff | Modifying a Stat | Modifying a Specific Unit Ability | Damaging a Unit | . | Download the Model | Import the Mixamo Model | Importing Mixamo Animations | Features | . | . ",
    "url": "/class-unit.html",
    
    "relUrl": "/class-unit.html"
  },"28": {
    "doc": "Unit",
    "title": "Unit Logic",
    "content": "Ability Selection . Non-player units will constantly try to . Target Selection . Unit Range . Unit . ",
    "url": "/class-unit.html#unit-logic",
    
    "relUrl": "/class-unit.html#unit-logic"
  },"29": {
    "doc": "Unit",
    "title": "Public Methods",
    "content": "You can interact with units via the public methods. These allow you to modify unit stats, visuals, and other key properties. Modifying Unit Health . // Add 100 to the unit's current health. unit.AddHealth(100); // Remove 100 from the unit's current health. unit.RemoveHealth(100); . Modifying Unit Resources . // Add 100 to the unit's current resource count. unit.AddResource(100); // Remove 100 from the unit's current resource count. unit.RemoveResource(100); . Modifying Unit Abilities . // Add the specified ability to the unit. unit.AddAbility(abilityTemplate); // Remove the specified ability from the unit. unit.RemoveAbility(abilityTemplate); // Replace the current specified ability with the specified ability. If the unit does // not have the 'current' ability, they will not get the new ability. unit.ReplaceAbility(currentAbilityTemplate, newAbilityTemplate); // Lock the given ability, preventing the unit from casting it. If the unit does not // have an ability with a matching template, this will do nothing. unit.LockAbility(abilityTemplate); // Unlock the given ability, allowing the unit to cast it. If the unit does not // have an ability with a matching template, this will do nothing. unit.UnlockAbility(abilityTemplate); . Checking Unit Statuses . // Check to see if the unit is currently stunned. bool isStunned = unit.IsStunned(); // Check to see if the unit is currently moving. bool isMoving = unit.IsMoving(); // Check to see if the unit is currently casting an ability. bool isCasting = unit.IsCasting(); // Check to see if the specified unit is an enemy of the unit. bool isEnemy = unit.IsEnemy(unitToCompare); // Check to see if the specified unit is an ally of the unit. bool isAlly = unit.IsAlly(unitToCompare); // Check to see if the unit has a specific buff/debuff. bool hasBuff = unit.HasBuff(\"NameOfBuff\"); // Check to see if the unit is currently able to move. bool canMove = unit.CanMove(); . Moving a Unit . // Instantly move the unit to the specified location. unit.Teleport(newPosition); // Smoothly move the unit to the specified location in the specified amount of time. unit.MoveOverTime(newPosition, timeToReachDestination); . Visual Effects . // Set the outline colour for the unit. unit.SetOutline(Color.red); // Set the outline colour and size for the unit. unit.SetOutline(Color.red, outlineSize, outlineAlpha); // Have the unit play the specified animation (the name must match a node in the Animator). unit.PlayAnimation(\"AnimationName\"); // Rotate the unit by the given amount (in degrees) over the given duration. unit.StartSpin(degreesToRotate, duration); . Applying a Buff . // Set the outline colour for the unit. unit.SetOutline(Color.red); // Set the outline colour and size for the unit. unit.SetOutline(Color.red, outlineSize, outlineAlpha); // Have the unit play the specified animation (the name must match a node in the Animator). unit.PlayAnimation(\"AnimationName\"); // Rotate the unit by the given amount (in degrees) over the given duration. unit.StartSpin(degreesToRotate, duration); . Modifying a Stat . // Permanently modifies the movement speed of the unit. In this case, // it will increase the movement speed of the unit by 20%. // // Valid Stats include: // - Damage // - MaxHealth // - MaxResource // - CriticalStrikeChance // - CriticalStrikeDamage // - Armor // - AttacksPerSecond // - CooldownReduction // - MovementSpeed // - ResourceCostReduction // - ResourceGeneration unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f); // Temporarily modifies the movement speed of the unit. In this case, // it will increase the movement speed of the unit by 20% for 10 seconds. unit.stats[Stat.MovementSpeed].AddTimedPercentageModifier(1.2f, 10.0f); // A buff name can also be given when applying a buff or debuff. This lets you // reference it later if you want to remove or modify it (e.g., an ability may // give the player a movement speed boost until they next take damage). unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f, \"Sprint\"); // If a buff name is given, a maximum number of buff 'stacks' can also be specified. // This limits how many times this effect can be applied to the unit. In this case, // the unit can have three sprint modifiers applied (resulting in a 60% speed increase). unit.stats[Stat.MovementSpeed].AddPercentageModifier(1.2f, \"Sprint\", 3); // This method can be used to remove all existing modifiers with a matching label. unit.stats[Stat.Damage].RemoveModifiersWithLabel(\"Sprint\"); // A stat modifier can also be a specific value, rather than a percentage. In this case, // the base damage of all attacks is increased by 5 instead of a percentage modifier. unit.stats[Stat.Damage].AddValueModifier(5); . Modifying a Specific Unit Ability . // Modifies the damage of the specified ability on the specified unit. // In this example, the ability would do 50% more damage. unit.AddAbilityDamageModifier(ability, 1.5f); // Modifies the cooldown of the specified ability on the specified unit. // In this example, the ability cooldown will be reduced by 50%. unit.AddAbilityCooldownModifier(ability, 0.5f); // Modifies the cost of the specified ability on the specified unit. // In this example, the ability would be reduced to 10% of its current cost. unit.AddAbilityCostModifier(ability, 0.1f); // Just like with stat modifiers, the ability modifiers can also be timed. // In this example, the ability would deal double damage for five seconds. unit.AddTimedAbilityDamageModifier(ability, 2.0f, 5.0f); // Just like with stat modifiers, the ability modifiers can also be given a // reference name, and a maximum stack count. unit.AddTimedAbilityDamageModifier(ability, 2.0f, 5.0f, \"Frenzy\", 1); // Use this method to remove all ability modifiers from an ability which have // the given reference name (e.g., this would remove the frenzy buff in the previous example). unit.RemoveAbilityBuffModifiers(ability, \"Frenzy\"); . Damaging a Unit . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require('./lang/' + l) return true; } . ",
    "url": "/class-unit.html#public-methods",
    
    "relUrl": "/class-unit.html#public-methods"
  },"30": {
    "doc": "Unit",
    "title": "Download the Model",
    "content": ". | Go to Mixamo. | Log in, or create a new account if you do not already have one. | Select or upload your character model. | Customize the animation if needed by selecting from the animations available. | Click the Download button. | Choose the following options for Unity: . | Format: FBX for Unity. | Pose: T-Pose. | Animation: If you want to include the animation, make sure it’s selected. | Skin: With Skin. | . | Click the Download button in the popup. | . ",
    "url": "/class-unit.html#download-the-model",
    
    "relUrl": "/class-unit.html#download-the-model"
  },"31": {
    "doc": "Unit",
    "title": "Import the Mixamo Model",
    "content": ". | Open your Unity project. | In the Project window, navigate to the folder you want to import the model into. | Drag the downloaded FBX file into the Unity folder, or right-click and select Import New Asset to locate and import the file manually. | Once imported, select the model in the Project window. | In the Inspector, go to the Model tab and ensure the Animation Type is set to Humanoid (for human-like characters) or Generic (for other types of models). | Under the Material section, if you’re using the legacy shader, check Import Materials and Use Legacy Materials to ensure proper texture mapping. This will help the model use the correct materials that were imported with the FBX. | Click Apply. | . ",
    "url": "/class-unit.html#import-the-mixamo-model",
    
    "relUrl": "/class-unit.html#import-the-mixamo-model"
  },"32": {
    "doc": "Unit",
    "title": "Importing Mixamo Animations",
    "content": ". | Go to Mixamo.com. | Log in, or create a new account if you do not already have one. | . Mixamo models use different avatars for defining animations. This means that an animation shown on one character may not look correct if it is applied to a different character. If you encounter this problem, you should use a T-Pose for the avatar instead. dfgdfgdfg . ",
    "url": "/class-unit.html#importing-mixamo-animations",
    
    "relUrl": "/class-unit.html#importing-mixamo-animations"
  },"33": {
    "doc": "Unit",
    "title": "Features",
    "content": ". | Clean layout | Responsive design | Easy to use | . Default label . Blue label . Stable . New release . Coming soon . Deprecated . ",
    "url": "/class-unit.html#features",
    
    "relUrl": "/class-unit.html#features"
  },"34": {
    "doc": "Unit",
    "title": "Unit",
    "content": " ",
    "url": "/class-unit.html",
    
    "relUrl": "/class-unit.html"
  },"35": {
    "doc": "Coding",
    "title": "Example Item Code 2",
    "content": "While you are not required to write any code in the development of your experience, if you need to implement complex logic for an item, ability, quest, or other game mechanic, this section will show you how it can be done. This page will focus specifically on how you can build an item with custom logic. The experience can be developed without any code, but if you do want to use code to develop your items, abilities, quests or other content to control complex logic which cannot easi . ",
    "url": "/example-code.html#example-item-code-2",
    
    "relUrl": "/example-code.html#example-item-code-2"
  },"36": {
    "doc": "Coding",
    "title": "Contents",
    "content": ". | Example Item Code 2 . | Download the Model | Import the Mixamo Model | Importing Mixamo Animations | Features | . | . ",
    "url": "/example-code.html",
    
    "relUrl": "/example-code.html"
  },"37": {
    "doc": "Coding",
    "title": "Download the Model",
    "content": ". | Go to Mixamo. | Log in, or create a new account if you do not already have one. | Select or upload your character model. | Customize the animation if needed by selecting from the animations available. | Click the Download button. | Choose the following options for Unity: . | Format: FBX for Unity. | Pose: T-Pose. | Animation: If you want to include the animation, make sure it’s selected. | Skin: With Skin. | . | Click the Download button in the popup. | . ",
    "url": "/example-code.html#download-the-model",
    
    "relUrl": "/example-code.html#download-the-model"
  },"38": {
    "doc": "Coding",
    "title": "Import the Mixamo Model",
    "content": ". | Open your Unity project. | In the Project window, navigate to the folder you want to import the model into. | Drag the downloaded FBX file into the Unity folder, or right-click and select Import New Asset to locate and import the file manually. | Once imported, select the model in the Project window. | In the Inspector, go to the Model tab and ensure the Animation Type is set to Humanoid (for human-like characters) or Generic (for other types of models). | Under the Material section, if you’re using the legacy shader, check Import Materials and Use Legacy Materials to ensure proper texture mapping. This will help the model use the correct materials that were imported with the FBX. | Click Apply. | . ",
    "url": "/example-code.html#import-the-mixamo-model",
    
    "relUrl": "/example-code.html#import-the-mixamo-model"
  },"39": {
    "doc": "Coding",
    "title": "Importing Mixamo Animations",
    "content": ". | Go to Mixamo.com. | Log in, or create a new account if you do not already have one. | . Mixamo models use different avatars for defining animations. This means that an animation shown on one character may not look correct if it is applied to a different character. If you encounter this problem, you should use a T-Pose for the avatar instead. dfgdfgdfg . ",
    "url": "/example-code.html#importing-mixamo-animations",
    
    "relUrl": "/example-code.html#importing-mixamo-animations"
  },"40": {
    "doc": "Coding",
    "title": "Features",
    "content": ". | Clean layout | Responsive design | Easy to use | . Default label . Blue label . Stable . New release . Coming soon . Deprecated . ",
    "url": "/example-code.html#features",
    
    "relUrl": "/example-code.html#features"
  },"41": {
    "doc": "Coding",
    "title": "Coding",
    "content": " ",
    "url": "/example-code.html",
    
    "relUrl": "/example-code.html"
  },"42": {
    "doc": "Home",
    "title": "Welcome to Just the Docs",
    "content": "This is the home page of your site! . ",
    "url": "/#welcome-to-just-the-docs",
    
    "relUrl": "/#welcome-to-just-the-docs"
  },"43": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "/",
    
    "relUrl": "/"
  },"44": {
    "doc": "Info",
    "title": "Welcome to the Info Page 2",
    "content": "This is an example page that uses the Just the Docs template. You can write Markdown here, or add custom HTML if needed. ",
    "url": "/info/#welcome-to-the-info-page-2",
    
    "relUrl": "/info/#welcome-to-the-info-page-2"
  },"45": {
    "doc": "Info",
    "title": "Features",
    "content": ". | Clean layout | Responsive design | Easy to use | . Default label . Blue label . Stable . New release . Coming soon . Deprecated . ",
    "url": "/info/#features",
    
    "relUrl": "/info/#features"
  },"46": {
    "doc": "Info",
    "title": "Info",
    "content": " ",
    "url": "/info/",
    
    "relUrl": "/info/"
  },"47": {
    "doc": "Importing a Mixamo Model",
    "title": "Importing a Mixamo Model",
    "content": " ",
    "url": "/mixamo/",
    
    "relUrl": "/mixamo/"
  },"48": {
    "doc": "Importing a Mixamo Model",
    "title": "Contents",
    "content": ". | Importing a Mixamo Model . | Download the Model | Import the Mixamo Model | Importing Mixamo Animations | Features | . | . ",
    "url": "/mixamo/",
    
    "relUrl": "/mixamo/"
  },"49": {
    "doc": "Importing a Mixamo Model",
    "title": "Download the Model",
    "content": ". | Go to Mixamo. | Log in, or create a new account if you do not already have one. | Select or upload your character model. | Customize the animation if needed by selecting from the animations available. | Click the Download button. | Choose the following options for Unity: . | Format: FBX for Unity. | Pose: T-Pose. | Animation: If you want to include the animation, make sure it’s selected. | Skin: With Skin. | . | Click the Download button in the popup. | . ",
    "url": "/mixamo/#download-the-model",
    
    "relUrl": "/mixamo/#download-the-model"
  },"50": {
    "doc": "Importing a Mixamo Model",
    "title": "Import the Mixamo Model",
    "content": ". | Open your Unity project. | In the Project window, navigate to the folder you want to import the model into. | Drag the downloaded FBX file into the Unity folder, or right-click and select Import New Asset to locate and import the file manually. | Once imported, select the model in the Project window. | In the Inspector, go to the Model tab and ensure the Animation Type is set to Humanoid (for human-like characters) or Generic (for other types of models). | Under the Material section, if you’re using the legacy shader, check Import Materials and Use Legacy Materials to ensure proper texture mapping. This will help the model use the correct materials that were imported with the FBX. | Click Apply. | . ",
    "url": "/mixamo/#import-the-mixamo-model",
    
    "relUrl": "/mixamo/#import-the-mixamo-model"
  },"51": {
    "doc": "Importing a Mixamo Model",
    "title": "Importing Mixamo Animations",
    "content": ". | Go to Mixamo.com. | Log in, or create a new account if you do not already have one. | . Mixamo models use different avatars for defining animations. This means that an animation shown on one character may not look correct if it is applied to a different character. If you encounter this problem, you should use a T-Pose for the avatar instead. dfgdfgdfg . ",
    "url": "/mixamo/#importing-mixamo-animations",
    
    "relUrl": "/mixamo/#importing-mixamo-animations"
  },"52": {
    "doc": "Importing a Mixamo Model",
    "title": "Features",
    "content": ". | Clean layout | Responsive design | Easy to use | . Default label . Blue label . Stable . New release . Coming soon . Deprecated . ",
    "url": "/mixamo/#features",
    
    "relUrl": "/mixamo/#features"
  },"53": {
    "doc": "Resources",
    "title": "Game Development Resources",
    "content": "This page contains a collection of resources that will help you develop your games. ",
    "url": "/resources/#game-development-resources",
    
    "relUrl": "/resources/#game-development-resources"
  },"54": {
    "doc": "Resources",
    "title": "Contents",
    "content": ". | Game Development Resources . | Game Design | Game Programming Resources | UI | Fonts | Music | Sound Effects | Textures | Animations | 3D Models | 3D Humanoid Characters | Terrain Tools | Useful Unity Tools | . | . ",
    "url": "/resources/",
    
    "relUrl": "/resources/"
  },"55": {
    "doc": "Resources",
    "title": "Game Design",
    "content": "Game Design Lenses: A collection of 101 lenses or perspectives that help you analyze and improve your game design decisions. These lenses focus on aspects like gameplay balance, player experience, and system design. Great for refining your ideas and spotting potential issues. The MDA Framework: A well-known framework for understanding how different game design elements interact. It helps you think about the relationship between game mechanics, player behavior (dynamics), and the emotional responses you want to evoke (aesthetics). The Golden Rule of Game Design: This article breaks down the “Golden Rule” of game design: designing with the player’s experience in mind. It provides advice on how to ensure that your game is intuitive, engaging, and enjoyable by prioritizing player feedback and emotions. The Game Maker’s Toolkit YouTube Channel: A YouTube channel by Mark Brown, who explores specific game design elements in detail, like level design, systems, and player psychology. His videos break down examples from real games and provide valuable insights into how game mechanics and narrative are intertwined. The 5 Types of Fun: In this video, Marc LeBlanc discusses the five types of fun: Sensation, Fantasy, Narrative, Challenge, and Fellowship. Understanding these types helps you design games that cater to different player preferences and build deeper, more engaging experiences. The Designer’s Notebook: A collection of articles by seasoned game designers, each offering insights on different elements of game design, from narrative to mechanics to systems design. Each article tackles a specific aspect of creating games and offers actionable advice. Game Accessibility Guidelines: Every game designer should bookmark these guidelines. They go through the principles you should follow and give examples for each task. There’s even a checklist you can download. GDC Vault: The Game Developers Conference adds all the various talks and presentations from their events to their vault. These range from technical advice on how to develop specific ideas to wider trends and best practices. Design Doc This channel answers the tricky, specific questions you might have about game design, focusing on the mechanics themselves. How do you stop people from hoarding items? Why add critical hits? What’s the point of fast travel? . Brackeys: A huge channel of tutorials that also delves into the actual game design decisions behind that development. The only downside is that they shut down a few years ago, so some videos can be a little outdated. ",
    "url": "/resources/#game-design",
    
    "relUrl": "/resources/#game-design"
  },"56": {
    "doc": "Resources",
    "title": "Game Programming Resources",
    "content": "Game Programming Patterns: Keeping your code clean and organised is a major challenge, so this free ebook teaches you the best practices. Programming Patterns on Unity: Unity has released a similar guide around coding patterns and explaining how to use them inside Unity. freeCodeCamp.org: If you want to learn to code, this is the channel to visit. They go deep into the practical and theory side and even have the full Harvard Computer Science University course as a 25-hour video. ",
    "url": "/resources/#game-programming-resources",
    
    "relUrl": "/resources/#game-programming-resources"
  },"57": {
    "doc": "Resources",
    "title": "UI",
    "content": "Game UI Database: A collection of reference images clearly showing key UI elements for thousands of games. Game-icons.net: A collection of thousands of game icons (CC 3.0 Licence). ",
    "url": "/resources/#ui",
    
    "relUrl": "/resources/#ui"
  },"58": {
    "doc": "Resources",
    "title": "Fonts",
    "content": "Google Fonts – Offers a wide variety of fonts that are free for personal and commercial use. It’s easy to integrate into both web and game projects. DaFont – A large collection of fonts, many of which are free for personal use (and some for commercial use). It’s popular for more creative and themed fonts. 1001 Free Fonts – Offers a variety of fonts, with some fonts available for commercial use. Be sure to check the licensing for each font. FontSpace – A large community-driven collection of free fonts, many of which are free for commercial use. Always check the font license. ",
    "url": "/resources/#fonts",
    
    "relUrl": "/resources/#fonts"
  },"59": {
    "doc": "Resources",
    "title": "Music",
    "content": "Free Music Archive (FMA) – A great resource for free music under various licenses, including Creative Commons. It’s a good place to find royalty-free music for your game. Incompetech – Created by composer Kevin MacLeod, Incompetech offers a large library of royalty-free music that can be used for games, with proper attribution required. Bensound – Offers royalty-free music, with many tracks available for free with attribution. Great for background music in games. ",
    "url": "/resources/#music",
    
    "relUrl": "/resources/#music"
  },"60": {
    "doc": "Resources",
    "title": "Sound Effects",
    "content": "GDC Free Sound and Music: Every year, the Game Developers Conference (GDC) offers a collection of free sound effects and music that can be used in your games. The collection includes tracks from the GDC Audio and Music track, often showcasing great work from professionals in the industry. You can access these resources for free after registering with GDC. Freesound A collaborative database of audio clips, many of which are free for use under a Creative Commons license. You can find a wide range of sound effects, from nature sounds to urban noises. SoundBible – Provides free sound effects that are either public domain or Creative Commons-licensed, perfect for game development. FreeSoundEffects – A collection of royalty-free sound effects, with many available for both personal and commercial use. BBC Sound Effects Archive – A massive collection of over 16,000 sound effects, available for free under a RemArc license for personal and educational use. ",
    "url": "/resources/#sound-effects",
    
    "relUrl": "/resources/#sound-effects"
  },"61": {
    "doc": "Resources",
    "title": "Textures",
    "content": "AmbientCG – Offers high-quality textures under a Creative Commons CC0 license, meaning you can use them for any project, even commercial ones. They have a wide range of textures, including materials, wood, metals, and more. Texture Haven – A great resource for high-quality, free textures with a focus on photorealistic materials. All textures are available under the CC0 license. Textures.com – Provides a large library of free textures, with a focus on realistic materials. They offer free textures with a limitation on the number of downloads per day, and a paid option for more frequent downloads. CGBookcase – A collection of high-quality textures, all free for personal and commercial use, under a CC0 license. It includes a variety of materials such as fabrics, metals, and bricks. Share Textures – Offers a variety of free textures, including PBR (physically-based rendering) textures, which are great for game engines like Unity and Unreal. 3DTextures.me A library of PBR and high-quality textures that are free to use under a Creative Commons license. They have a wide range of textures for environments, buildings, and materials. FreePBR.com – Focuses on providing free PBR (Physically Based Rendering) textures, useful for realistic game environments. Textures are free to use for both personal and commercial projects. GameTextures – Offers both free and paid textures, with a range of materials like metal, wood, and rock. The free options include a good selection, and you can use them in commercial projects with proper attribution. ",
    "url": "/resources/#textures",
    
    "relUrl": "/resources/#textures"
  },"62": {
    "doc": "Resources",
    "title": "Animations",
    "content": "Mixamo A fantastic resource for free, high-quality 3D character animations. It allows you to upload your own models or use their library of free characters and animations. All animations are free for commercial and non-commercial use. OpenGameArt – Offers a variety of 2D and 3D assets, including character animations, free for use in your games. The animations available are licensed under Creative Commons or public domain. Kenney – Known for its high-quality, free game assets, Kenney provides 2D and 3D character animations. All assets are free to use in commercial and non-commercial projects. Unity Asset Store (Free Section) – The Unity Asset Store has a collection of free animation packs for both 2D and 3D models. These can be used in Unity projects with clear licensing terms, which can include commercial use. ",
    "url": "/resources/#animations",
    
    "relUrl": "/resources/#animations"
  },"63": {
    "doc": "Resources",
    "title": "3D Models",
    "content": "TurboSquid: While TurboSquid is primarily a paid service, they offer a selection of free models, including characters, environments, and vehicles. CGTrader: A marketplace offering free 3D models, with a range of categories from low-poly characters to more detailed models suitable for game use. Sketchfab: A platform where creators can share 3D models, including both free and paid assets. Sketchfab’s library contains numerous free models, ranging from characters to environment assets. OpenGameArt: Offers a large collection of free 3D models, textures, and assets for game development, with many models suitable for prototyping and indie projects. Kenney: A well-known creator of free game assets, Kenney provides 3D models for characters, environments, and other game elements. Clara.io: A cloud-based 3D modeling tool with a library of free 3D models. You can find a variety of free models for use in games and other projects. Free3D: A repository offering free 3D models in various formats, including .obj, .fbx, and .3ds, for use in game development. ",
    "url": "/resources/#3d-models",
    
    "relUrl": "/resources/#3d-models"
  },"64": {
    "doc": "Resources",
    "title": "3D Humanoid Characters",
    "content": "Mixamo: Mixamo offers a vast collection of free 3D character animations that are ready to be applied to your models. You can upload your own 3D models or choose from a variety of characters provided by Mixamo. The animations cover a wide range of actions, from running and jumping to combat and dancing. All animations are free for both personal and commercial use. OpenGameArt: OpenGameArt provides a range of free 3D animated character models. The site includes fully rigged characters with animation sets for various actions, such as walking, running, and attacking. Models and animations are generally licensed under Creative Commons or public domain, allowing for free use in both personal and commercial projects. Kenney: Kenney’s free asset packs include animated 3D character models, along with animations for movements such as walking and jumping. The models are fully rigged and ready to be used in your projects. All assets from Kenney are free for both commercial and non-commercial use, with no attribution required. ",
    "url": "/resources/#3d-humanoid-characters",
    
    "relUrl": "/resources/#3d-humanoid-characters"
  },"65": {
    "doc": "Resources",
    "title": "Terrain Tools",
    "content": "World Machine (Free Version): World Machine is a powerful terrain generation tool that allows you to create realistic, complex terrains using an intuitive node-based system. The free version includes basic features, enabling you to generate heightmaps, apply erosion effects, and export terrains. Gaea (Free Version): Gaea is another terrain generation tool that offers a free version with powerful terrain-building features. It allows for the creation of heightmaps, erosion effects, and other features like textures and materials for creating realistic terrains. ",
    "url": "/resources/#terrain-tools",
    
    "relUrl": "/resources/#terrain-tools"
  },"66": {
    "doc": "Resources",
    "title": "Useful Unity Tools",
    "content": "DOTween: A fast and efficient animation system that works with Unity’s tweening features to create smooth animations for any kind of object or property. PrimeTween: A high-performance animation and sequencing tool designed to provide maximum flexibility and speed for complex animation systems. PlayerPref Editor: A user-friendly editor tool for managing Unity PlayerPrefs, allowing easy access and modification of saved data. Sticky Notes: A tool that lets developers place sticky notes in the Unity Editor for better organization and reminders within the project. Editor Attributes: A package that provides useful attributes to improve Unity Editor interfaces, such as custom labels, color-coding, and tooltips. Serialized Dictionary: A Unity plugin for using dictionaries in the Inspector, offering a more flexible data structure for game developers. Fast Script Reload: A tool that speeds up script reloading during development, reducing iteration times and enhancing productivity for Unity developers. ",
    "url": "/resources/#useful-unity-tools",
    
    "relUrl": "/resources/#useful-unity-tools"
  },"67": {
    "doc": "Resources",
    "title": "Resources",
    "content": " ",
    "url": "/resources/",
    
    "relUrl": "/resources/"
  }
}
